
Tank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f64  08003f64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f6c  08003f6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  08003f80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003f80  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb21  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd6  00000000  00000000  0002eb5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00030738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  000315c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec0c  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5ef  00000000  00000000  00050f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c11c2  00000000  00000000  0005b58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  0011c7c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f2c 	.word	0x08003f2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f2c 	.word	0x08003f2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92b 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f003 f9da 	bl	80038b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f943 	bl	80007b6 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90b 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff29 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff3e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff31 	bl	8000610 <__NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff feda 	bl	8000594 <HAL_GetTick>
 80007e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e099      	b.n	8000920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2202      	movs	r2, #2
 80007f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800080c:	e00f      	b.n	800082e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800080e:	f7ff fec1 	bl	8000594 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b05      	cmp	r3, #5
 800081a:	d908      	bls.n	800082e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2220      	movs	r2, #32
 8000820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2203      	movs	r2, #3
 8000826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e078      	b.n	8000920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e8      	bne.n	800080e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <HAL_DMA_Init+0x158>)
 8000848:	4013      	ands	r3, r2
 800084a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800085a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	4313      	orrs	r3, r2
 800087e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	2b04      	cmp	r3, #4
 8000886:	d107      	bne.n	8000898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4313      	orrs	r3, r2
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f023 0307 	bic.w	r3, r3, #7
 80008ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d117      	bne.n	80008f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00e      	beq.n	80008f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fa0b 	bl	8000cf0 <DMA_CheckFifoParam>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d008      	beq.n	80008f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2240      	movs	r2, #64	; 0x40
 80008e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008ee:	2301      	movs	r3, #1
 80008f0:	e016      	b.n	8000920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 f9c2 	bl	8000c84 <DMA_CalcBaseAndBitshift>
 8000900:	4603      	mov	r3, r0
 8000902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000908:	223f      	movs	r2, #63	; 0x3f
 800090a:	409a      	lsls	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	f010803f 	.word	0xf010803f

0800092c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b02      	cmp	r3, #2
 800093e:	d004      	beq.n	800094a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00c      	b.n	8000964 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2205      	movs	r2, #5
 800094e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 0201 	bic.w	r2, r2, #1
 8000960:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800097c:	4b92      	ldr	r3, [pc, #584]	; (8000bc8 <HAL_DMA_IRQHandler+0x258>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a92      	ldr	r2, [pc, #584]	; (8000bcc <HAL_DMA_IRQHandler+0x25c>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0a9b      	lsrs	r3, r3, #10
 8000988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800099a:	2208      	movs	r2, #8
 800099c:	409a      	lsls	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d01a      	beq.n	80009dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d013      	beq.n	80009dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f022 0204 	bic.w	r2, r2, #4
 80009c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c8:	2208      	movs	r2, #8
 80009ca:	409a      	lsls	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009d4:	f043 0201 	orr.w	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e0:	2201      	movs	r2, #1
 80009e2:	409a      	lsls	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d012      	beq.n	8000a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00b      	beq.n	8000a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009fe:	2201      	movs	r2, #1
 8000a00:	409a      	lsls	r2, r3
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a0a:	f043 0202 	orr.w	r2, r3, #2
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a16:	2204      	movs	r2, #4
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d012      	beq.n	8000a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00b      	beq.n	8000a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a34:	2204      	movs	r2, #4
 8000a36:	409a      	lsls	r2, r3
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a40:	f043 0204 	orr.w	r2, r3, #4
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d043      	beq.n	8000ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d03c      	beq.n	8000ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	409a      	lsls	r2, r3
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d018      	beq.n	8000ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d108      	bne.n	8000aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d024      	beq.n	8000ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	4798      	blx	r3
 8000a9e:	e01f      	b.n	8000ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d01b      	beq.n	8000ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	4798      	blx	r3
 8000ab0:	e016      	b.n	8000ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d107      	bne.n	8000ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f022 0208 	bic.w	r2, r2, #8
 8000ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 808e 	beq.w	8000c0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f000 8086 	beq.w	8000c0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b06:	2220      	movs	r2, #32
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d136      	bne.n	8000b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 0216 	bic.w	r2, r2, #22
 8000b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <HAL_DMA_IRQHandler+0x1da>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d007      	beq.n	8000b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0208 	bic.w	r2, r2, #8
 8000b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5e:	223f      	movs	r2, #63	; 0x3f
 8000b60:	409a      	lsls	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d07d      	beq.n	8000c7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	4798      	blx	r3
        }
        return;
 8000b86:	e078      	b.n	8000c7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d01c      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d108      	bne.n	8000bb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d030      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	4798      	blx	r3
 8000bb4:	e02b      	b.n	8000c0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d027      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	4798      	blx	r3
 8000bc6:	e022      	b.n	8000c0e <HAL_DMA_IRQHandler+0x29e>
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10f      	bne.n	8000bfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0210 	bic.w	r2, r2, #16
 8000bec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d032      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d022      	beq.n	8000c68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2205      	movs	r2, #5
 8000c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d307      	bcc.n	8000c56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f2      	bne.n	8000c3a <HAL_DMA_IRQHandler+0x2ca>
 8000c54:	e000      	b.n	8000c58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000c56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	4798      	blx	r3
 8000c78:	e000      	b.n	8000c7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8000c7a:	bf00      	nop
    }
  }
}
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop

08000c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3b10      	subs	r3, #16
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <DMA_CalcBaseAndBitshift+0x64>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c9e:	4a13      	ldr	r2, [pc, #76]	; (8000cec <DMA_CalcBaseAndBitshift+0x68>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d909      	bls.n	8000cc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cba:	f023 0303 	bic.w	r3, r3, #3
 8000cbe:	1d1a      	adds	r2, r3, #4
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	659a      	str	r2, [r3, #88]	; 0x58
 8000cc4:	e007      	b.n	8000cd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	aaaaaaab 	.word	0xaaaaaaab
 8000cec:	08003f44 	.word	0x08003f44

08000cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d11f      	bne.n	8000d4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d855      	bhi.n	8000dbc <DMA_CheckFifoParam+0xcc>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <DMA_CheckFifoParam+0x28>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d29 	.word	0x08000d29
 8000d1c:	08000d3b 	.word	0x08000d3b
 8000d20:	08000d29 	.word	0x08000d29
 8000d24:	08000dbd 	.word	0x08000dbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d045      	beq.n	8000dc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d38:	e042      	b.n	8000dc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d42:	d13f      	bne.n	8000dc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d48:	e03c      	b.n	8000dc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d52:	d121      	bne.n	8000d98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d836      	bhi.n	8000dc8 <DMA_CheckFifoParam+0xd8>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <DMA_CheckFifoParam+0x70>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000d77 	.word	0x08000d77
 8000d68:	08000d71 	.word	0x08000d71
 8000d6c:	08000d89 	.word	0x08000d89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
      break;
 8000d74:	e02f      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d024      	beq.n	8000dcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d86:	e021      	b.n	8000dcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d90:	d11e      	bne.n	8000dd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000d96:	e01b      	b.n	8000dd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d902      	bls.n	8000da4 <DMA_CheckFifoParam+0xb4>
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d003      	beq.n	8000daa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000da2:	e018      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
      break;
 8000da8:	e015      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00e      	beq.n	8000dd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
      break;
 8000dba:	e00b      	b.n	8000dd4 <DMA_CheckFifoParam+0xe4>
      break;
 8000dbc:	bf00      	nop
 8000dbe:	e00a      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000dc0:	bf00      	nop
 8000dc2:	e008      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000dc4:	bf00      	nop
 8000dc6:	e006      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000dc8:	bf00      	nop
 8000dca:	e004      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000dcc:	bf00      	nop
 8000dce:	e002      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8000dd0:	bf00      	nop
 8000dd2:	e000      	b.n	8000dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000dd4:	bf00      	nop
    }
  } 
  
  return status; 
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	e16b      	b.n	80010d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 815a 	bne.w	80010d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d00b      	beq.n	8000e3e <HAL_GPIO_Init+0x5a>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e32:	2b11      	cmp	r3, #17
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0xfc>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b12      	cmp	r3, #18
 8000ede:	d123      	bne.n	8000f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	08da      	lsrs	r2, r3, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3208      	adds	r2, #8
 8000f22:	69b9      	ldr	r1, [r7, #24]
 8000f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0203 	and.w	r2, r3, #3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80b4 	beq.w	80010d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b5f      	ldr	r3, [pc, #380]	; (80010ec <HAL_GPIO_Init+0x308>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a5e      	ldr	r2, [pc, #376]	; (80010ec <HAL_GPIO_Init+0x308>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b5c      	ldr	r3, [pc, #368]	; (80010ec <HAL_GPIO_Init+0x308>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f86:	4a5a      	ldr	r2, [pc, #360]	; (80010f0 <HAL_GPIO_Init+0x30c>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a51      	ldr	r2, [pc, #324]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d02b      	beq.n	800100a <HAL_GPIO_Init+0x226>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <HAL_GPIO_Init+0x314>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d025      	beq.n	8001006 <HAL_GPIO_Init+0x222>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4f      	ldr	r2, [pc, #316]	; (80010fc <HAL_GPIO_Init+0x318>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d01f      	beq.n	8001002 <HAL_GPIO_Init+0x21e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4e      	ldr	r2, [pc, #312]	; (8001100 <HAL_GPIO_Init+0x31c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d019      	beq.n	8000ffe <HAL_GPIO_Init+0x21a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4d      	ldr	r2, [pc, #308]	; (8001104 <HAL_GPIO_Init+0x320>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x216>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <HAL_GPIO_Init+0x324>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x212>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_GPIO_Init+0x328>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x20e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4a      	ldr	r2, [pc, #296]	; (8001110 <HAL_GPIO_Init+0x32c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x20a>
 8000fea:	2307      	movs	r3, #7
 8000fec:	e00e      	b.n	800100c <HAL_GPIO_Init+0x228>
 8000fee:	2308      	movs	r3, #8
 8000ff0:	e00c      	b.n	800100c <HAL_GPIO_Init+0x228>
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	e00a      	b.n	800100c <HAL_GPIO_Init+0x228>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x228>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x228>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x228>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x228>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x228>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	4934      	ldr	r1, [pc, #208]	; (80010f0 <HAL_GPIO_Init+0x30c>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_GPIO_Init+0x330>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_GPIO_Init+0x330>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x330>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x330>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_GPIO_Init+0x330>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_GPIO_Init+0x330>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_GPIO_Init+0x330>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_GPIO_Init+0x330>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f ae90 	bls.w	8000e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	3724      	adds	r7, #36	; 0x24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40021400 	.word	0x40021400
 800110c:	40021800 	.word	0x40021800
 8001110:	40021c00 	.word	0x40021c00
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e11f      	b.n	800139e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f002 fbc6 	bl	8003904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800119e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011b0:	f000 fd18 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80011b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4a7b      	ldr	r2, [pc, #492]	; (80013a8 <HAL_I2C_Init+0x25c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d807      	bhi.n	80011d0 <HAL_I2C_Init+0x84>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <HAL_I2C_Init+0x260>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	bf94      	ite	ls
 80011c8:	2301      	movls	r3, #1
 80011ca:	2300      	movhi	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	e006      	b.n	80011de <HAL_I2C_Init+0x92>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4a77      	ldr	r2, [pc, #476]	; (80013b0 <HAL_I2C_Init+0x264>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	bf94      	ite	ls
 80011d8:	2301      	movls	r3, #1
 80011da:	2300      	movhi	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0db      	b.n	800139e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4a72      	ldr	r2, [pc, #456]	; (80013b4 <HAL_I2C_Init+0x268>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0c9b      	lsrs	r3, r3, #18
 80011f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	430a      	orrs	r2, r1
 8001204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4a64      	ldr	r2, [pc, #400]	; (80013a8 <HAL_I2C_Init+0x25c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d802      	bhi.n	8001220 <HAL_I2C_Init+0xd4>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3301      	adds	r3, #1
 800121e:	e009      	b.n	8001234 <HAL_I2C_Init+0xe8>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	4a63      	ldr	r2, [pc, #396]	; (80013b8 <HAL_I2C_Init+0x26c>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	099b      	lsrs	r3, r3, #6
 8001232:	3301      	adds	r3, #1
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	430b      	orrs	r3, r1
 800123a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4956      	ldr	r1, [pc, #344]	; (80013a8 <HAL_I2C_Init+0x25c>)
 8001250:	428b      	cmp	r3, r1
 8001252:	d80d      	bhi.n	8001270 <HAL_I2C_Init+0x124>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e59      	subs	r1, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	2b04      	cmp	r3, #4
 800126a:	bf38      	it	cc
 800126c:	2304      	movcc	r3, #4
 800126e:	e04f      	b.n	8001310 <HAL_I2C_Init+0x1c4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d111      	bne.n	800129c <HAL_I2C_Init+0x150>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	3301      	adds	r3, #1
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	e012      	b.n	80012c2 <HAL_I2C_Init+0x176>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_Init+0x17e>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e022      	b.n	8001310 <HAL_I2C_Init+0x1c4>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10e      	bne.n	80012f0 <HAL_I2C_Init+0x1a4>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1e58      	subs	r0, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	440b      	add	r3, r1
 80012e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ee:	e00f      	b.n	8001310 <HAL_I2C_Init+0x1c4>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e58      	subs	r0, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	0099      	lsls	r1, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	fbb0 f3f3 	udiv	r3, r0, r3
 8001306:	3301      	adds	r3, #1
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	4313      	orrs	r3, r2
 8001316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800133e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6911      	ldr	r1, [r2, #16]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	4311      	orrs	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	430b      	orrs	r3, r1
 8001352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	000186a0 	.word	0x000186a0
 80013ac:	001e847f 	.word	0x001e847f
 80013b0:	003d08ff 	.word	0x003d08ff
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	10624dd3 	.word	0x10624dd3

080013bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e25b      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d075      	beq.n	80014c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	4ba3      	ldr	r3, [pc, #652]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d00c      	beq.n	8001400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f2:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013fe:	d10b      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4b99      	ldr	r3, [pc, #612]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d05b      	beq.n	80014c4 <HAL_RCC_OscConfig+0x108>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d157      	bne.n	80014c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e236      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x74>
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a90      	ldr	r2, [pc, #576]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x98>
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a8a      	ldr	r2, [pc, #552]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a87      	ldr	r2, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a83      	ldr	r2, [pc, #524]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a80      	ldr	r2, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff f88e 	bl	8000594 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff f88a 	bl	8000594 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1fb      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xc0>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff f87a 	bl	8000594 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff f876 	bl	8000594 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1e7      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0xe8>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	4b65      	ldr	r3, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b62      	ldr	r3, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ea:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1bb      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b56      	ldr	r3, [pc, #344]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4952      	ldr	r1, [pc, #328]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e03a      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <HAL_RCC_OscConfig+0x2b0>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff f82f 	bl	8000594 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff f82b 	bl	8000594 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e19c      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4940      	ldr	r1, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <HAL_RCC_OscConfig+0x2b0>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff f80e 	bl	8000594 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff f80a 	bl	8000594 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e17b      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d030      	beq.n	8001608 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d016      	beq.n	80015dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_RCC_OscConfig+0x2b4>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7fe ffee 	bl	8000594 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015bc:	f7fe ffea 	bl	8000594 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e15b      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x200>
 80015da:	e015      	b.n	8001608 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_RCC_OscConfig+0x2b4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7fe ffd7 	bl	8000594 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ea:	f7fe ffd3 	bl	8000594 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e144      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a0 	beq.w	8001756 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d121      	bne.n	8001696 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7fe ff99 	bl	8000594 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e011      	b.n	800168a <HAL_RCC_OscConfig+0x2ce>
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
 8001674:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7fe ff8c 	bl	8000594 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0fd      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x4d4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d106      	bne.n	80016ac <HAL_RCC_OscConfig+0x2f0>
 800169e:	4b7d      	ldr	r3, [pc, #500]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a7c      	ldr	r2, [pc, #496]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
 80016aa:	e01c      	b.n	80016e6 <HAL_RCC_OscConfig+0x32a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x312>
 80016b4:	4b77      	ldr	r3, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a76      	ldr	r2, [pc, #472]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
 80016c0:	4b74      	ldr	r3, [pc, #464]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	4a73      	ldr	r2, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	; 0x70
 80016cc:	e00b      	b.n	80016e6 <HAL_RCC_OscConfig+0x32a>
 80016ce:	4b71      	ldr	r3, [pc, #452]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a70      	ldr	r2, [pc, #448]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a6d      	ldr	r2, [pc, #436]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d015      	beq.n	800171a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7fe ff51 	bl	8000594 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7fe ff4d 	bl	8000594 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0bc      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170c:	4b61      	ldr	r3, [pc, #388]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0ee      	beq.n	80016f6 <HAL_RCC_OscConfig+0x33a>
 8001718:	e014      	b.n	8001744 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7fe ff3b 	bl	8000594 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7fe ff37 	bl	8000594 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0a6      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	4b56      	ldr	r3, [pc, #344]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d105      	bne.n	8001756 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174a:	4b52      	ldr	r3, [pc, #328]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 8001750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8092 	beq.w	8001884 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d05c      	beq.n	8001826 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d141      	bne.n	80017f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	4b48      	ldr	r3, [pc, #288]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7fe ff0b 	bl	8000594 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001782:	f7fe ff07 	bl	8000594 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e078      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001794:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	019b      	lsls	r3, r3, #6
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	061b      	lsls	r3, r3, #24
 80017c4:	4933      	ldr	r1, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ca:	4b33      	ldr	r3, [pc, #204]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7fe fee0 	bl	8000594 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d8:	f7fe fedc 	bl	8000594 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e04d      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x41c>
 80017f6:	e045      	b.n	8001884 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7fe fec9 	bl	8000594 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7fe fec5 	bl	8000594 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e036      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x44a>
 8001824:	e02e      	b.n	8001884 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e029      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_RCC_OscConfig+0x4d8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	429a      	cmp	r2, r3
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d115      	bne.n	8001880 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800185a:	4013      	ands	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001860:	4293      	cmp	r3, r2
 8001862:	d10d      	bne.n	8001880 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40007000 	.word	0x40007000
 8001894:	40023800 	.word	0x40023800
 8001898:	42470060 	.word	0x42470060

0800189c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0cc      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b68      	ldr	r3, [pc, #416]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d90c      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b8      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	494d      	ldr	r1, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d044      	beq.n	80019bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d119      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e07f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d003      	beq.n	800195a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	2b03      	cmp	r3, #3
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e067      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4934      	ldr	r1, [pc, #208]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800198c:	f7fe fe02 	bl	8000594 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7fe fdfe 	bl	8000594 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e04f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d20c      	bcs.n	80019e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f821 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a26:	4601      	mov	r1, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	fa21 f303 	lsr.w	r3, r1, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd62 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08003f4c 	.word	0x08003f4c
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d007      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x32>
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d008      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x38>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f040 808d 	bne.w	8001bae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a96:	60bb      	str	r3, [r7, #8]
       break;
 8001a98:	e08c      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a9c:	60bb      	str	r3, [r7, #8]
      break;
 8001a9e:	e089      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aaa:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d023      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	f04f 0400 	mov.w	r4, #0
 8001ac0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	ea03 0501 	and.w	r5, r3, r1
 8001acc:	ea04 0602 	and.w	r6, r4, r2
 8001ad0:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ad2:	fb02 f106 	mul.w	r1, r2, r6
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	fb02 f205 	mul.w	r2, r2, r5
 8001adc:	440a      	add	r2, r1
 8001ade:	493a      	ldr	r1, [pc, #232]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ae0:	fba5 0101 	umull	r0, r1, r5, r1
 8001ae4:	1853      	adds	r3, r2, r1
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f04f 0400 	mov.w	r4, #0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4623      	mov	r3, r4
 8001af2:	f7fe fb69 	bl	80001c8 <__aeabi_uldivmod>
 8001af6:	4603      	mov	r3, r0
 8001af8:	460c      	mov	r4, r1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e049      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	f04f 0400 	mov.w	r4, #0
 8001b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	ea03 0501 	and.w	r5, r3, r1
 8001b14:	ea04 0602 	and.w	r6, r4, r2
 8001b18:	4629      	mov	r1, r5
 8001b1a:	4632      	mov	r2, r6
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	f04f 0400 	mov.w	r4, #0
 8001b24:	0154      	lsls	r4, r2, #5
 8001b26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b2a:	014b      	lsls	r3, r1, #5
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4622      	mov	r2, r4
 8001b30:	1b49      	subs	r1, r1, r5
 8001b32:	eb62 0206 	sbc.w	r2, r2, r6
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f04f 0400 	mov.w	r4, #0
 8001b3e:	0194      	lsls	r4, r2, #6
 8001b40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b44:	018b      	lsls	r3, r1, #6
 8001b46:	1a5b      	subs	r3, r3, r1
 8001b48:	eb64 0402 	sbc.w	r4, r4, r2
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	00e2      	lsls	r2, r4, #3
 8001b56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b5a:	00d9      	lsls	r1, r3, #3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	195b      	adds	r3, r3, r5
 8001b62:	eb44 0406 	adc.w	r4, r4, r6
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	02a2      	lsls	r2, r4, #10
 8001b70:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b74:	0299      	lsls	r1, r3, #10
 8001b76:	460b      	mov	r3, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f04f 0400 	mov.w	r4, #0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	f7fe fb1e 	bl	80001c8 <__aeabi_uldivmod>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	60bb      	str	r3, [r7, #8]
      break;
 8001bac:	e002      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001bb0:	60bb      	str	r3, [r7, #8]
      break;
 8001bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	00f42400 	.word	0x00f42400
 8001bc8:	017d7840 	.word	0x017d7840

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001bec:	4601      	mov	r1, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08003f5c 	.word	0x08003f5c

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c10:	f7ff ffdc 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001c14:	4601      	mov	r1, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0b5b      	lsrs	r3, r3, #13
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08003f5c 	.word	0x08003f5c

08001c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e01d      	b.n	8001c82 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f001 fe9a 	bl	8003994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f000 f962 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e083      	b.n	8001da6 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f001 fea6 	bl	8003a04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f000 f92c 	bl	8001f3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d0c:	f023 0303 	bic.w	r3, r3, #3
 8001d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d2a:	f023 030c 	bic.w	r3, r3, #12
 8001d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	4313      	orrs	r3, r2
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	011a      	lsls	r2, r3, #4
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	031b      	lsls	r3, r3, #12
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d68:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001d70:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e0b4      	b.n	8001f34 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	f200 809f 	bhi.w	8001f20 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e1d 	.word	0x08001e1d
 8001dec:	08001f21 	.word	0x08001f21
 8001df0:	08001f21 	.word	0x08001f21
 8001df4:	08001f21 	.word	0x08001f21
 8001df8:	08001e5d 	.word	0x08001e5d
 8001dfc:	08001f21 	.word	0x08001f21
 8001e00:	08001f21 	.word	0x08001f21
 8001e04:	08001f21 	.word	0x08001f21
 8001e08:	08001e9f 	.word	0x08001e9f
 8001e0c:	08001f21 	.word	0x08001f21
 8001e10:	08001f21 	.word	0x08001f21
 8001e14:	08001f21 	.word	0x08001f21
 8001e18:	08001edf 	.word	0x08001edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f92a 	bl	800207c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6999      	ldr	r1, [r3, #24]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	619a      	str	r2, [r3, #24]
      break;
 8001e5a:	e062      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f97a 	bl	800215c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6999      	ldr	r1, [r3, #24]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	021a      	lsls	r2, r3, #8
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	619a      	str	r2, [r3, #24]
      break;
 8001e9c:	e041      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f9cf 	bl	8002248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0208 	orr.w	r2, r2, #8
 8001eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0204 	bic.w	r2, r2, #4
 8001ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69d9      	ldr	r1, [r3, #28]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	61da      	str	r2, [r3, #28]
      break;
 8001edc:	e021      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fa23 	bl	8002330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69d9      	ldr	r1, [r3, #28]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	021a      	lsls	r2, r3, #8
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	61da      	str	r2, [r3, #28]
      break;
 8001f1e:	e000      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001f20:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a40      	ldr	r2, [pc, #256]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d00f      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <TIM_Base_SetConfig+0x118>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00b      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3c      	ldr	r2, [pc, #240]	; (8002058 <TIM_Base_SetConfig+0x11c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	; (800205c <TIM_Base_SetConfig+0x120>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d027      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2c      	ldr	r2, [pc, #176]	; (8002054 <TIM_Base_SetConfig+0x118>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d023      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <TIM_Base_SetConfig+0x11c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01f      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2a      	ldr	r2, [pc, #168]	; (800205c <TIM_Base_SetConfig+0x120>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a29      	ldr	r2, [pc, #164]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <TIM_Base_SetConfig+0x128>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <TIM_Base_SetConfig+0x12c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <TIM_Base_SetConfig+0x130>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <TIM_Base_SetConfig+0x134>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a24      	ldr	r2, [pc, #144]	; (8002074 <TIM_Base_SetConfig+0x138>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <TIM_Base_SetConfig+0x13c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_Base_SetConfig+0xf8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d103      	bne.n	800203c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	615a      	str	r2, [r3, #20]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40010000 	.word	0x40010000
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40000c00 	.word	0x40000c00
 8002060:	40010400 	.word	0x40010400
 8002064:	40014000 	.word	0x40014000
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800
 8002070:	40001800 	.word	0x40001800
 8002074:	40001c00 	.word	0x40001c00
 8002078:	40002000 	.word	0x40002000

0800207c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f023 0201 	bic.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f023 0302 	bic.w	r3, r3, #2
 80020c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a20      	ldr	r2, [pc, #128]	; (8002154 <TIM_OC1_SetConfig+0xd8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_OC1_SetConfig+0x64>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <TIM_OC1_SetConfig+0xdc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10c      	bne.n	80020fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0308 	bic.w	r3, r3, #8
 80020e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <TIM_OC1_SetConfig+0xd8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_OC1_SetConfig+0x8e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <TIM_OC1_SetConfig+0xdc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	621a      	str	r2, [r3, #32]
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40010000 	.word	0x40010000
 8002158:	40010400 	.word	0x40010400

0800215c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0210 	bic.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800218a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0320 	bic.w	r3, r3, #32
 80021a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <TIM_OC2_SetConfig+0xe4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_OC2_SetConfig+0x68>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a21      	ldr	r2, [pc, #132]	; (8002244 <TIM_OC2_SetConfig+0xe8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10d      	bne.n	80021e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <TIM_OC2_SetConfig+0xe4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <TIM_OC2_SetConfig+0x94>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <TIM_OC2_SetConfig+0xe8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d113      	bne.n	8002218 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	40010400 	.word	0x40010400

08002248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <TIM_OC3_SetConfig+0xe0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <TIM_OC3_SetConfig+0x66>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <TIM_OC3_SetConfig+0xe4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10d      	bne.n	80022ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a16      	ldr	r2, [pc, #88]	; (8002328 <TIM_OC3_SetConfig+0xe0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_OC3_SetConfig+0x92>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <TIM_OC3_SetConfig+0xe4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d113      	bne.n	8002302 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	621a      	str	r2, [r3, #32]
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40010000 	.word	0x40010000
 800232c:	40010400 	.word	0x40010400

08002330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800237a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	031b      	lsls	r3, r3, #12
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <TIM_OC4_SetConfig+0xa4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <TIM_OC4_SetConfig+0x68>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <TIM_OC4_SetConfig+0xa8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d109      	bne.n	80023ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	621a      	str	r2, [r3, #32]
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e05a      	b.n	80024aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d022      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d01d      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d018      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00e      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10c      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4313      	orrs	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40000c00 	.word	0x40000c00
 80024c8:	40010400 	.word	0x40010400
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40001800 	.word	0x40001800

080024d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e03d      	b.n	800256c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e03f      	b.n	800260a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f001 fb0e 	bl	8003bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	; 0x24
 80025a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fa69 	bl	8002a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x52>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f996 	bl	8002990 <UART_Receive_IT>
      return;
 8002664:	e0d1      	b.n	800280a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b0 	beq.w	80027ce <HAL_UART_IRQHandler+0x1ba>
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_UART_IRQHandler+0x70>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a5 	beq.w	80027ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_UART_IRQHandler+0x90>
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_UART_IRQHandler+0xb0>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_UART_IRQHandler+0xd0>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	f043 0204 	orr.w	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <HAL_UART_IRQHandler+0xfa>
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <HAL_UART_IRQHandler+0xee>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	f043 0208 	orr.w	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	2b00      	cmp	r3, #0
 8002714:	d078      	beq.n	8002808 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_UART_IRQHandler+0x11c>
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f930 	bl	8002990 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_UART_IRQHandler+0x144>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d031      	beq.n	80027bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f879 	bl	8002850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d123      	bne.n	80027b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_UART_IRQHandler+0x1fc>)
 800278a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe f8cb 	bl	800092c <HAL_DMA_Abort_IT>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027a6:	4610      	mov	r0, r2
 80027a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027aa:	e00e      	b.n	80027ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f845 	bl	800283c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b2:	e00a      	b.n	80027ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f841 	bl	800283c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ba:	e006      	b.n	80027ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f83d 	bl	800283c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80027c8:	e01e      	b.n	8002808 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ca:	bf00      	nop
    return;
 80027cc:	e01c      	b.n	8002808 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_UART_IRQHandler+0x1d6>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f866 	bl	80028b4 <UART_Transmit_IT>
    return;
 80027e8:	e00f      	b.n	800280a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_UART_IRQHandler+0x1f6>
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8ae 	bl	8002960 <UART_EndTransmit_IT>
    return;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002808:	bf00      	nop
  }
}
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	0800288d 	.word	0x0800288d

08002814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002866:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff ffc8 	bl	800283c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b21      	cmp	r3, #33	; 0x21
 80028c6:	d144      	bne.n	8002952 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d0:	d11a      	bne.n	8002908 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	621a      	str	r2, [r3, #32]
 80028fa:	e00e      	b.n	800291a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	621a      	str	r2, [r3, #32]
 8002906:	e008      	b.n	800291a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	1c59      	adds	r1, r3, #1
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6211      	str	r1, [r2, #32]
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29b      	uxth	r3, r3
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4619      	mov	r1, r3
 8002928:	84d1      	strh	r1, [r2, #38]	; 0x26
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002976:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff47 	bl	8002814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b22      	cmp	r3, #34	; 0x22
 80029a2:	d171      	bne.n	8002a88 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d123      	bne.n	80029f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10e      	bne.n	80029da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
 80029d8:	e029      	b.n	8002a2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
 80029f4:	e01b      	b.n	8002a2e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6858      	ldr	r0, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	1c59      	adds	r1, r3, #1
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6291      	str	r1, [r2, #40]	; 0x28
 8002a0e:	b2c2      	uxtb	r2, r0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e00c      	b.n	8002a2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	1c58      	adds	r0, r3, #1
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	6288      	str	r0, [r1, #40]	; 0x28
 8002a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d120      	bne.n	8002a84 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0220 	bic.w	r2, r2, #32
 8002a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fed4 	bl	8002828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e002      	b.n	8002a8a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ad6:	f023 030c 	bic.w	r3, r3, #12
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	68f9      	ldr	r1, [r7, #12]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b02:	f040 818b 	bne.w	8002e1c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4ac1      	ldr	r2, [pc, #772]	; (8002e10 <UART_SetConfig+0x37c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d005      	beq.n	8002b1c <UART_SetConfig+0x88>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4abf      	ldr	r2, [pc, #764]	; (8002e14 <UART_SetConfig+0x380>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f040 80bd 	bne.w	8002c96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b1c:	f7ff f876 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 8002b20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	461d      	mov	r5, r3
 8002b26:	f04f 0600 	mov.w	r6, #0
 8002b2a:	46a8      	mov	r8, r5
 8002b2c:	46b1      	mov	r9, r6
 8002b2e:	eb18 0308 	adds.w	r3, r8, r8
 8002b32:	eb49 0409 	adc.w	r4, r9, r9
 8002b36:	4698      	mov	r8, r3
 8002b38:	46a1      	mov	r9, r4
 8002b3a:	eb18 0805 	adds.w	r8, r8, r5
 8002b3e:	eb49 0906 	adc.w	r9, r9, r6
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b56:	4688      	mov	r8, r1
 8002b58:	4691      	mov	r9, r2
 8002b5a:	eb18 0005 	adds.w	r0, r8, r5
 8002b5e:	eb49 0106 	adc.w	r1, r9, r6
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	461d      	mov	r5, r3
 8002b68:	f04f 0600 	mov.w	r6, #0
 8002b6c:	196b      	adds	r3, r5, r5
 8002b6e:	eb46 0406 	adc.w	r4, r6, r6
 8002b72:	461a      	mov	r2, r3
 8002b74:	4623      	mov	r3, r4
 8002b76:	f7fd fb27 	bl	80001c8 <__aeabi_uldivmod>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <UART_SetConfig+0x384>)
 8002b82:	fba3 2302 	umull	r2, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	461d      	mov	r5, r3
 8002b90:	f04f 0600 	mov.w	r6, #0
 8002b94:	46a9      	mov	r9, r5
 8002b96:	46b2      	mov	sl, r6
 8002b98:	eb19 0309 	adds.w	r3, r9, r9
 8002b9c:	eb4a 040a 	adc.w	r4, sl, sl
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	46a2      	mov	sl, r4
 8002ba4:	eb19 0905 	adds.w	r9, r9, r5
 8002ba8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bc0:	4689      	mov	r9, r1
 8002bc2:	4692      	mov	sl, r2
 8002bc4:	eb19 0005 	adds.w	r0, r9, r5
 8002bc8:	eb4a 0106 	adc.w	r1, sl, r6
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	461d      	mov	r5, r3
 8002bd2:	f04f 0600 	mov.w	r6, #0
 8002bd6:	196b      	adds	r3, r5, r5
 8002bd8:	eb46 0406 	adc.w	r4, r6, r6
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	f7fd faf2 	bl	80001c8 <__aeabi_uldivmod>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <UART_SetConfig+0x384>)
 8002bec:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	3332      	adds	r3, #50	; 0x32
 8002bfe:	4a86      	ldr	r2, [pc, #536]	; (8002e18 <UART_SetConfig+0x384>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c0c:	4498      	add	r8, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	461d      	mov	r5, r3
 8002c12:	f04f 0600 	mov.w	r6, #0
 8002c16:	46a9      	mov	r9, r5
 8002c18:	46b2      	mov	sl, r6
 8002c1a:	eb19 0309 	adds.w	r3, r9, r9
 8002c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c22:	4699      	mov	r9, r3
 8002c24:	46a2      	mov	sl, r4
 8002c26:	eb19 0905 	adds.w	r9, r9, r5
 8002c2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c42:	4689      	mov	r9, r1
 8002c44:	4692      	mov	sl, r2
 8002c46:	eb19 0005 	adds.w	r0, r9, r5
 8002c4a:	eb4a 0106 	adc.w	r1, sl, r6
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	461d      	mov	r5, r3
 8002c54:	f04f 0600 	mov.w	r6, #0
 8002c58:	196b      	adds	r3, r5, r5
 8002c5a:	eb46 0406 	adc.w	r4, r6, r6
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4623      	mov	r3, r4
 8002c62:	f7fd fab1 	bl	80001c8 <__aeabi_uldivmod>
 8002c66:	4603      	mov	r3, r0
 8002c68:	460c      	mov	r4, r1
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <UART_SetConfig+0x384>)
 8002c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2164      	movs	r1, #100	; 0x64
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <UART_SetConfig+0x384>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 0207 	and.w	r2, r3, #7
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4442      	add	r2, r8
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	e26f      	b.n	8003176 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c96:	f7fe ffa5 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8002c9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	f04f 0600 	mov.w	r6, #0
 8002ca4:	46a8      	mov	r8, r5
 8002ca6:	46b1      	mov	r9, r6
 8002ca8:	eb18 0308 	adds.w	r3, r8, r8
 8002cac:	eb49 0409 	adc.w	r4, r9, r9
 8002cb0:	4698      	mov	r8, r3
 8002cb2:	46a1      	mov	r9, r4
 8002cb4:	eb18 0805 	adds.w	r8, r8, r5
 8002cb8:	eb49 0906 	adc.w	r9, r9, r6
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ccc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cd0:	4688      	mov	r8, r1
 8002cd2:	4691      	mov	r9, r2
 8002cd4:	eb18 0005 	adds.w	r0, r8, r5
 8002cd8:	eb49 0106 	adc.w	r1, r9, r6
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	f04f 0600 	mov.w	r6, #0
 8002ce6:	196b      	adds	r3, r5, r5
 8002ce8:	eb46 0406 	adc.w	r4, r6, r6
 8002cec:	461a      	mov	r2, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	f7fd fa6a 	bl	80001c8 <__aeabi_uldivmod>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <UART_SetConfig+0x384>)
 8002cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	461d      	mov	r5, r3
 8002d0a:	f04f 0600 	mov.w	r6, #0
 8002d0e:	46a9      	mov	r9, r5
 8002d10:	46b2      	mov	sl, r6
 8002d12:	eb19 0309 	adds.w	r3, r9, r9
 8002d16:	eb4a 040a 	adc.w	r4, sl, sl
 8002d1a:	4699      	mov	r9, r3
 8002d1c:	46a2      	mov	sl, r4
 8002d1e:	eb19 0905 	adds.w	r9, r9, r5
 8002d22:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d3a:	4689      	mov	r9, r1
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	eb19 0005 	adds.w	r0, r9, r5
 8002d42:	eb4a 0106 	adc.w	r1, sl, r6
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	f04f 0600 	mov.w	r6, #0
 8002d50:	196b      	adds	r3, r5, r5
 8002d52:	eb46 0406 	adc.w	r4, r6, r6
 8002d56:	461a      	mov	r2, r3
 8002d58:	4623      	mov	r3, r4
 8002d5a:	f7fd fa35 	bl	80001c8 <__aeabi_uldivmod>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	460c      	mov	r4, r1
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <UART_SetConfig+0x384>)
 8002d66:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2164      	movs	r1, #100	; 0x64
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	3332      	adds	r3, #50	; 0x32
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <UART_SetConfig+0x384>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d86:	4498      	add	r8, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	f04f 0600 	mov.w	r6, #0
 8002d90:	46a9      	mov	r9, r5
 8002d92:	46b2      	mov	sl, r6
 8002d94:	eb19 0309 	adds.w	r3, r9, r9
 8002d98:	eb4a 040a 	adc.w	r4, sl, sl
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	46a2      	mov	sl, r4
 8002da0:	eb19 0905 	adds.w	r9, r9, r5
 8002da4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dbc:	4689      	mov	r9, r1
 8002dbe:	4692      	mov	sl, r2
 8002dc0:	eb19 0005 	adds.w	r0, r9, r5
 8002dc4:	eb4a 0106 	adc.w	r1, sl, r6
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	461d      	mov	r5, r3
 8002dce:	f04f 0600 	mov.w	r6, #0
 8002dd2:	196b      	adds	r3, r5, r5
 8002dd4:	eb46 0406 	adc.w	r4, r6, r6
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	f7fd f9f4 	bl	80001c8 <__aeabi_uldivmod>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <UART_SetConfig+0x384>)
 8002de8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2164      	movs	r1, #100	; 0x64
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <UART_SetConfig+0x384>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 0207 	and.w	r2, r3, #7
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4442      	add	r2, r8
 8002e0c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e0e:	e1b2      	b.n	8003176 <UART_SetConfig+0x6e2>
 8002e10:	40011000 	.word	0x40011000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4ad7      	ldr	r2, [pc, #860]	; (8003180 <UART_SetConfig+0x6ec>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d005      	beq.n	8002e32 <UART_SetConfig+0x39e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4ad6      	ldr	r2, [pc, #856]	; (8003184 <UART_SetConfig+0x6f0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f040 80d1 	bne.w	8002fd4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e32:	f7fe feeb 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 8002e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	469a      	mov	sl, r3
 8002e3c:	f04f 0b00 	mov.w	fp, #0
 8002e40:	46d0      	mov	r8, sl
 8002e42:	46d9      	mov	r9, fp
 8002e44:	eb18 0308 	adds.w	r3, r8, r8
 8002e48:	eb49 0409 	adc.w	r4, r9, r9
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	46a1      	mov	r9, r4
 8002e50:	eb18 080a 	adds.w	r8, r8, sl
 8002e54:	eb49 090b 	adc.w	r9, r9, fp
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e6c:	4688      	mov	r8, r1
 8002e6e:	4691      	mov	r9, r2
 8002e70:	eb1a 0508 	adds.w	r5, sl, r8
 8002e74:	eb4b 0609 	adc.w	r6, fp, r9
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f04f 0400 	mov.w	r4, #0
 8002e8a:	0094      	lsls	r4, r2, #2
 8002e8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e90:	008b      	lsls	r3, r1, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	4623      	mov	r3, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	4631      	mov	r1, r6
 8002e9a:	f7fd f995 	bl	80001c8 <__aeabi_uldivmod>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4bb8      	ldr	r3, [pc, #736]	; (8003188 <UART_SetConfig+0x6f4>)
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	469b      	mov	fp, r3
 8002eb4:	f04f 0c00 	mov.w	ip, #0
 8002eb8:	46d9      	mov	r9, fp
 8002eba:	46e2      	mov	sl, ip
 8002ebc:	eb19 0309 	adds.w	r3, r9, r9
 8002ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	46a2      	mov	sl, r4
 8002ec8:	eb19 090b 	adds.w	r9, r9, fp
 8002ecc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ee4:	4689      	mov	r9, r1
 8002ee6:	4692      	mov	sl, r2
 8002ee8:	eb1b 0509 	adds.w	r5, fp, r9
 8002eec:	eb4c 060a 	adc.w	r6, ip, sl
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	0094      	lsls	r4, r2, #2
 8002f04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	4628      	mov	r0, r5
 8002f10:	4631      	mov	r1, r6
 8002f12:	f7fd f959 	bl	80001c8 <__aeabi_uldivmod>
 8002f16:	4603      	mov	r3, r0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b9a      	ldr	r3, [pc, #616]	; (8003188 <UART_SetConfig+0x6f4>)
 8002f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2164      	movs	r1, #100	; 0x64
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	3332      	adds	r3, #50	; 0x32
 8002f30:	4a95      	ldr	r2, [pc, #596]	; (8003188 <UART_SetConfig+0x6f4>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3c:	4498      	add	r8, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	469b      	mov	fp, r3
 8002f42:	f04f 0c00 	mov.w	ip, #0
 8002f46:	46d9      	mov	r9, fp
 8002f48:	46e2      	mov	sl, ip
 8002f4a:	eb19 0309 	adds.w	r3, r9, r9
 8002f4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f52:	4699      	mov	r9, r3
 8002f54:	46a2      	mov	sl, r4
 8002f56:	eb19 090b 	adds.w	r9, r9, fp
 8002f5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f72:	4689      	mov	r9, r1
 8002f74:	4692      	mov	sl, r2
 8002f76:	eb1b 0509 	adds.w	r5, fp, r9
 8002f7a:	eb4c 060a 	adc.w	r6, ip, sl
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	f04f 0400 	mov.w	r4, #0
 8002f90:	0094      	lsls	r4, r2, #2
 8002f92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f96:	008b      	lsls	r3, r1, #2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	f7fd f912 	bl	80001c8 <__aeabi_uldivmod>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b77      	ldr	r3, [pc, #476]	; (8003188 <UART_SetConfig+0x6f4>)
 8002fac:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	2164      	movs	r1, #100	; 0x64
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	3332      	adds	r3, #50	; 0x32
 8002fbe:	4a72      	ldr	r2, [pc, #456]	; (8003188 <UART_SetConfig+0x6f4>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4442      	add	r2, r8
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	e0d0      	b.n	8003176 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7fe fe06 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	469a      	mov	sl, r3
 8002fde:	f04f 0b00 	mov.w	fp, #0
 8002fe2:	46d0      	mov	r8, sl
 8002fe4:	46d9      	mov	r9, fp
 8002fe6:	eb18 0308 	adds.w	r3, r8, r8
 8002fea:	eb49 0409 	adc.w	r4, r9, r9
 8002fee:	4698      	mov	r8, r3
 8002ff0:	46a1      	mov	r9, r4
 8002ff2:	eb18 080a 	adds.w	r8, r8, sl
 8002ff6:	eb49 090b 	adc.w	r9, r9, fp
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003006:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800300a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800300e:	4688      	mov	r8, r1
 8003010:	4691      	mov	r9, r2
 8003012:	eb1a 0508 	adds.w	r5, sl, r8
 8003016:	eb4b 0609 	adc.w	r6, fp, r9
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4619      	mov	r1, r3
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	f04f 0400 	mov.w	r4, #0
 800302c:	0094      	lsls	r4, r2, #2
 800302e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	4628      	mov	r0, r5
 800303a:	4631      	mov	r1, r6
 800303c:	f7fd f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	461a      	mov	r2, r3
 8003046:	4b50      	ldr	r3, [pc, #320]	; (8003188 <UART_SetConfig+0x6f4>)
 8003048:	fba3 2302 	umull	r2, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	469b      	mov	fp, r3
 8003056:	f04f 0c00 	mov.w	ip, #0
 800305a:	46d9      	mov	r9, fp
 800305c:	46e2      	mov	sl, ip
 800305e:	eb19 0309 	adds.w	r3, r9, r9
 8003062:	eb4a 040a 	adc.w	r4, sl, sl
 8003066:	4699      	mov	r9, r3
 8003068:	46a2      	mov	sl, r4
 800306a:	eb19 090b 	adds.w	r9, r9, fp
 800306e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003086:	4689      	mov	r9, r1
 8003088:	4692      	mov	sl, r2
 800308a:	eb1b 0509 	adds.w	r5, fp, r9
 800308e:	eb4c 060a 	adc.w	r6, ip, sl
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	f04f 0400 	mov.w	r4, #0
 80030a4:	0094      	lsls	r4, r2, #2
 80030a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030aa:	008b      	lsls	r3, r1, #2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	4628      	mov	r0, r5
 80030b2:	4631      	mov	r1, r6
 80030b4:	f7fd f888 	bl	80001c8 <__aeabi_uldivmod>
 80030b8:	4603      	mov	r3, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	461a      	mov	r2, r3
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <UART_SetConfig+0x6f4>)
 80030c0:	fba3 1302 	umull	r1, r3, r3, r2
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	2164      	movs	r1, #100	; 0x64
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	3332      	adds	r3, #50	; 0x32
 80030d2:	4a2d      	ldr	r2, [pc, #180]	; (8003188 <UART_SetConfig+0x6f4>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030de:	4498      	add	r8, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	469b      	mov	fp, r3
 80030e4:	f04f 0c00 	mov.w	ip, #0
 80030e8:	46d9      	mov	r9, fp
 80030ea:	46e2      	mov	sl, ip
 80030ec:	eb19 0309 	adds.w	r3, r9, r9
 80030f0:	eb4a 040a 	adc.w	r4, sl, sl
 80030f4:	4699      	mov	r9, r3
 80030f6:	46a2      	mov	sl, r4
 80030f8:	eb19 090b 	adds.w	r9, r9, fp
 80030fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800310c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003114:	4689      	mov	r9, r1
 8003116:	4692      	mov	sl, r2
 8003118:	eb1b 0509 	adds.w	r5, fp, r9
 800311c:	eb4c 060a 	adc.w	r6, ip, sl
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4619      	mov	r1, r3
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f04f 0400 	mov.w	r4, #0
 8003132:	0094      	lsls	r4, r2, #2
 8003134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003138:	008b      	lsls	r3, r1, #2
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	4628      	mov	r0, r5
 8003140:	4631      	mov	r1, r6
 8003142:	f7fd f841 	bl	80001c8 <__aeabi_uldivmod>
 8003146:	4603      	mov	r3, r0
 8003148:	460c      	mov	r4, r1
 800314a:	461a      	mov	r2, r3
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <UART_SetConfig+0x6f4>)
 800314e:	fba3 1302 	umull	r1, r3, r3, r2
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2164      	movs	r1, #100	; 0x64
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	3332      	adds	r3, #50	; 0x32
 8003160:	4a09      	ldr	r2, [pc, #36]	; (8003188 <UART_SetConfig+0x6f4>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4442      	add	r2, r8
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	e7ff      	b.n	8003176 <UART_SetConfig+0x6e2>
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003180:	40011000 	.word	0x40011000
 8003184:	40011400 	.word	0x40011400
 8003188:	51eb851f 	.word	0x51eb851f

0800318c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003190:	f7fd f99a 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003194:	f000 f814 	bl	80031c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003198:	f000 faec 	bl	8003774 <MX_GPIO_Init>
  MX_DMA_Init();
 800319c:	f000 fac2 	bl	8003724 <MX_DMA_Init>
  MX_I2C1_Init();
 80031a0:	f000 f878 	bl	8003294 <MX_I2C1_Init>
  MX_TIM1_Init();
 80031a4:	f000 f8a4 	bl	80032f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80031a8:	f000 f932 	bl	8003410 <MX_TIM2_Init>
  MX_TIM3_Init();
 80031ac:	f000 f982 	bl	80034b4 <MX_TIM3_Init>
  MX_TIM8_Init();
 80031b0:	f000 f9d4 	bl	800355c <MX_TIM8_Init>
  MX_UART4_Init();
 80031b4:	f000 fa62 	bl	800367c <MX_UART4_Init>
  MX_USART3_UART_Init();
 80031b8:	f000 fa8a 	bl	80036d0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <main+0x30>
	...

080031c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b094      	sub	sp, #80	; 0x50
 80031c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031c6:	f107 0320 	add.w	r3, r7, #32
 80031ca:	2230      	movs	r2, #48	; 0x30
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fea4 	bl	8003f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <SystemClock_Config+0xcc>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a27      	ldr	r2, [pc, #156]	; (800328c <SystemClock_Config+0xcc>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <SystemClock_Config+0xcc>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <SystemClock_Config+0xd0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a21      	ldr	r2, [pc, #132]	; (8003290 <SystemClock_Config+0xd0>)
 800320a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <SystemClock_Config+0xd0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800321c:	2302      	movs	r3, #2
 800321e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003220:	2301      	movs	r3, #1
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003224:	2310      	movs	r3, #16
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003228:	2302      	movs	r3, #2
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003230:	2308      	movs	r3, #8
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003234:	23a8      	movs	r3, #168	; 0xa8
 8003236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003238:	2302      	movs	r3, #2
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800323c:	2304      	movs	r3, #4
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003240:	f107 0320 	add.w	r3, r7, #32
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe f8b9 	bl	80013bc <HAL_RCC_OscConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003250:	f000 fb28 	bl	80038a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003254:	230f      	movs	r3, #15
 8003256:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003258:	2302      	movs	r3, #2
 800325a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800326a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	2105      	movs	r1, #5
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fb12 	bl	800189c <HAL_RCC_ClockConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800327e:	f000 fb11 	bl	80038a4 <Error_Handler>
  }
}
 8003282:	bf00      	nop
 8003284:	3750      	adds	r7, #80	; 0x50
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000

08003294 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <MX_I2C1_Init+0x50>)
 800329a:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <MX_I2C1_Init+0x54>)
 800329c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <MX_I2C1_Init+0x58>)
 80032a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032d2:	f7fd ff3b 	bl	800114c <HAL_I2C_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032dc:	f000 fae2 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	2000016c 	.word	0x2000016c
 80032e8:	40005400 	.word	0x40005400
 80032ec:	000186a0 	.word	0x000186a0

080032f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b092      	sub	sp, #72	; 0x48
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	615a      	str	r2, [r3, #20]
 8003312:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	2220      	movs	r2, #32
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fdfe 	bl	8003f1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <MX_TIM1_Init+0x118>)
 8003322:	4a3a      	ldr	r2, [pc, #232]	; (800340c <MX_TIM1_Init+0x11c>)
 8003324:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003326:	4b38      	ldr	r3, [pc, #224]	; (8003408 <MX_TIM1_Init+0x118>)
 8003328:	22a7      	movs	r2, #167	; 0xa7
 800332a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <MX_TIM1_Init+0x118>)
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003332:	4b35      	ldr	r3, [pc, #212]	; (8003408 <MX_TIM1_Init+0x118>)
 8003334:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003338:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333a:	4b33      	ldr	r3, [pc, #204]	; (8003408 <MX_TIM1_Init+0x118>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <MX_TIM1_Init+0x118>)
 8003342:	2200      	movs	r2, #0
 8003344:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <MX_TIM1_Init+0x118>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800334c:	482e      	ldr	r0, [pc, #184]	; (8003408 <MX_TIM1_Init+0x118>)
 800334e:	f7fe fc71 	bl	8001c34 <HAL_TIM_PWM_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003358:	f000 faa4 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003364:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003368:	4619      	mov	r1, r3
 800336a:	4827      	ldr	r0, [pc, #156]	; (8003408 <MX_TIM1_Init+0x118>)
 800336c:	f7ff f836 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003376:	f000 fa95 	bl	80038a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800337a:	2360      	movs	r3, #96	; 0x60
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003382:	2300      	movs	r3, #0
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003386:	2300      	movs	r3, #0
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339a:	2208      	movs	r2, #8
 800339c:	4619      	mov	r1, r3
 800339e:	481a      	ldr	r0, [pc, #104]	; (8003408 <MX_TIM1_Init+0x118>)
 80033a0:	f7fe fd06 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80033aa:	f000 fa7b 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b2:	220c      	movs	r2, #12
 80033b4:	4619      	mov	r1, r3
 80033b6:	4814      	ldr	r0, [pc, #80]	; (8003408 <MX_TIM1_Init+0x118>)
 80033b8:	f7fe fcfa 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80033c2:	f000 fa6f 	bl	80038a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4807      	ldr	r0, [pc, #28]	; (8003408 <MX_TIM1_Init+0x118>)
 80033ea:	f7ff f873 	bl	80024d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80033f4:	f000 fa56 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033f8:	4803      	ldr	r0, [pc, #12]	; (8003408 <MX_TIM1_Init+0x118>)
 80033fa:	f000 fb7d 	bl	8003af8 <HAL_TIM_MspPostInit>

}
 80033fe:	bf00      	nop
 8003400:	3748      	adds	r7, #72	; 0x48
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000200 	.word	0x20000200
 800340c:	40010000 	.word	0x40010000

08003410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08c      	sub	sp, #48	; 0x30
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fd7c 	bl	8003f1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <MX_TIM2_Init+0xa0>)
 800342e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003432:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <MX_TIM2_Init+0xa0>)
 8003436:	2200      	movs	r2, #0
 8003438:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <MX_TIM2_Init+0xa0>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <MX_TIM2_Init+0xa0>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <MX_TIM2_Init+0xa0>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <MX_TIM2_Init+0xa0>)
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003452:	2301      	movs	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800345a:	2301      	movs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003466:	2300      	movs	r3, #0
 8003468:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800346a:	2301      	movs	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800346e:	2300      	movs	r3, #0
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	4619      	mov	r1, r3
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <MX_TIM2_Init+0xa0>)
 800347e:	f7fe fc04 	bl	8001c8a <HAL_TIM_Encoder_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003488:	f000 fa0c 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800348c:	2300      	movs	r3, #0
 800348e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4805      	ldr	r0, [pc, #20]	; (80034b0 <MX_TIM2_Init+0xa0>)
 800349a:	f7fe ff9f 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80034a4:	f000 f9fe 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034a8:	bf00      	nop
 80034aa:	3730      	adds	r7, #48	; 0x30
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000280 	.word	0x20000280

080034b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	; 0x30
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fd2a 	bl	8003f1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034d0:	4b20      	ldr	r3, [pc, #128]	; (8003554 <MX_TIM3_Init+0xa0>)
 80034d2:	4a21      	ldr	r2, [pc, #132]	; (8003558 <MX_TIM3_Init+0xa4>)
 80034d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <MX_TIM3_Init+0xa0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <MX_TIM3_Init+0xa0>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <MX_TIM3_Init+0xa0>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <MX_TIM3_Init+0xa0>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <MX_TIM3_Init+0xa0>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034f4:	2301      	movs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034fc:	2301      	movs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800350c:	2301      	movs	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003518:	f107 030c 	add.w	r3, r7, #12
 800351c:	4619      	mov	r1, r3
 800351e:	480d      	ldr	r0, [pc, #52]	; (8003554 <MX_TIM3_Init+0xa0>)
 8003520:	f7fe fbb3 	bl	8001c8a <HAL_TIM_Encoder_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800352a:	f000 f9bb 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4806      	ldr	r0, [pc, #24]	; (8003554 <MX_TIM3_Init+0xa0>)
 800353c:	f7fe ff4e 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003546:	f000 f9ad 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	3730      	adds	r7, #48	; 0x30
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200001c0 	.word	0x200001c0
 8003558:	40000400 	.word	0x40000400

0800355c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b092      	sub	sp, #72	; 0x48
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800356c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	2220      	movs	r2, #32
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fcc8 	bl	8003f1c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <MX_TIM8_Init+0x118>)
 800358e:	4a3a      	ldr	r2, [pc, #232]	; (8003678 <MX_TIM8_Init+0x11c>)
 8003590:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <MX_TIM8_Init+0x118>)
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <MX_TIM8_Init+0x118>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3359;
 800359e:	4b35      	ldr	r3, [pc, #212]	; (8003674 <MX_TIM8_Init+0x118>)
 80035a0:	f640 521f 	movw	r2, #3359	; 0xd1f
 80035a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <MX_TIM8_Init+0x118>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <MX_TIM8_Init+0x118>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <MX_TIM8_Init+0x118>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80035b8:	482e      	ldr	r0, [pc, #184]	; (8003674 <MX_TIM8_Init+0x118>)
 80035ba:	f7fe fb3b 	bl	8001c34 <HAL_TIM_PWM_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80035c4:	f000 f96e 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80035d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035d4:	4619      	mov	r1, r3
 80035d6:	4827      	ldr	r0, [pc, #156]	; (8003674 <MX_TIM8_Init+0x118>)
 80035d8:	f7fe ff00 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80035e2:	f000 f95f 	bl	80038a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035e6:	2360      	movs	r3, #96	; 0x60
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035f2:	2300      	movs	r3, #0
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003606:	2200      	movs	r2, #0
 8003608:	4619      	mov	r1, r3
 800360a:	481a      	ldr	r0, [pc, #104]	; (8003674 <MX_TIM8_Init+0x118>)
 800360c:	f7fe fbd0 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003616:	f000 f945 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800361a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361e:	220c      	movs	r2, #12
 8003620:	4619      	mov	r1, r3
 8003622:	4814      	ldr	r0, [pc, #80]	; (8003674 <MX_TIM8_Init+0x118>)
 8003624:	f7fe fbc4 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800362e:	f000 f939 	bl	80038a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800364a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4807      	ldr	r0, [pc, #28]	; (8003674 <MX_TIM8_Init+0x118>)
 8003656:	f7fe ff3d 	bl	80024d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8003660:	f000 f920 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <MX_TIM8_Init+0x118>)
 8003666:	f000 fa47 	bl	8003af8 <HAL_TIM_MspPostInit>

}
 800366a:	bf00      	nop
 800366c:	3748      	adds	r7, #72	; 0x48
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000008c 	.word	0x2000008c
 8003678:	40010400 	.word	0x40010400

0800367c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <MX_UART4_Init+0x4c>)
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <MX_UART4_Init+0x50>)
 8003684:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <MX_UART4_Init+0x4c>)
 8003688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800368c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <MX_UART4_Init+0x4c>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <MX_UART4_Init+0x4c>)
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <MX_UART4_Init+0x4c>)
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <MX_UART4_Init+0x4c>)
 80036a2:	220c      	movs	r2, #12
 80036a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <MX_UART4_Init+0x4c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <MX_UART4_Init+0x4c>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80036b2:	4805      	ldr	r0, [pc, #20]	; (80036c8 <MX_UART4_Init+0x4c>)
 80036b4:	f7fe ff60 	bl	8002578 <HAL_UART_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80036be:	f000 f8f1 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000240 	.word	0x20000240
 80036cc:	40004c00 	.word	0x40004c00

080036d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <MX_USART3_UART_Init+0x4c>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <MX_USART3_UART_Init+0x50>)
 80036d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <MX_USART3_UART_Init+0x4c>)
 80036dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <MX_USART3_UART_Init+0x4c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <MX_USART3_UART_Init+0x4c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <MX_USART3_UART_Init+0x4c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <MX_USART3_UART_Init+0x4c>)
 80036f6:	220c      	movs	r2, #12
 80036f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <MX_USART3_UART_Init+0x4c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <MX_USART3_UART_Init+0x4c>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003706:	4805      	ldr	r0, [pc, #20]	; (800371c <MX_USART3_UART_Init+0x4c>)
 8003708:	f7fe ff36 	bl	8002578 <HAL_UART_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003712:	f000 f8c7 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	2000012c 	.word	0x2000012c
 8003720:	40004800 	.word	0x40004800

08003724 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <MX_DMA_Init+0x4c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a0f      	ldr	r2, [pc, #60]	; (8003770 <MX_DMA_Init+0x4c>)
 8003734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <MX_DMA_Init+0x4c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	200c      	movs	r0, #12
 800374c:	f7fd f809 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003750:	200c      	movs	r0, #12
 8003752:	f7fd f822 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	200d      	movs	r0, #13
 800375c:	f7fd f801 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003760:	200d      	movs	r0, #13
 8003762:	f7fd f81a 	bl	800079a <HAL_NVIC_EnableIRQ>

}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800

08003774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <MX_GPIO_Init+0x120>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a40      	ldr	r2, [pc, #256]	; (8003894 <MX_GPIO_Init+0x120>)
 8003794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <MX_GPIO_Init+0x120>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <MX_GPIO_Init+0x120>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a39      	ldr	r2, [pc, #228]	; (8003894 <MX_GPIO_Init+0x120>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <MX_GPIO_Init+0x120>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <MX_GPIO_Init+0x120>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a32      	ldr	r2, [pc, #200]	; (8003894 <MX_GPIO_Init+0x120>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <MX_GPIO_Init+0x120>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <MX_GPIO_Init+0x120>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a2b      	ldr	r2, [pc, #172]	; (8003894 <MX_GPIO_Init+0x120>)
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <MX_GPIO_Init+0x120>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDR_Pin|LEDB_Pin|DOWNL_Pin|UPL_Pin, GPIO_PIN_RESET);
 80037fa:	2200      	movs	r2, #0
 80037fc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8003800:	4825      	ldr	r0, [pc, #148]	; (8003898 <MX_GPIO_Init+0x124>)
 8003802:	f7fd fc89 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8003806:	2200      	movs	r2, #0
 8003808:	2101      	movs	r1, #1
 800380a:	4824      	ldr	r0, [pc, #144]	; (800389c <MX_GPIO_Init+0x128>)
 800380c:	f7fd fc84 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOWNR_Pin|UPR_Pin, GPIO_PIN_RESET);
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003816:	4822      	ldr	r0, [pc, #136]	; (80038a0 <MX_GPIO_Init+0x12c>)
 8003818:	f7fd fc7e 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800381c:	2301      	movs	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003824:	2301      	movs	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4619      	mov	r1, r3
 800382e:	481a      	ldr	r0, [pc, #104]	; (8003898 <MX_GPIO_Init+0x124>)
 8003830:	f7fd fad8 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDB_Pin DOWNL_Pin UPL_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDB_Pin|DOWNL_Pin|UPL_Pin;
 8003834:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383a:	2301      	movs	r3, #1
 800383c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003846:	f107 0314 	add.w	r3, r7, #20
 800384a:	4619      	mov	r1, r3
 800384c:	4812      	ldr	r0, [pc, #72]	; (8003898 <MX_GPIO_Init+0x124>)
 800384e:	f7fd fac9 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDG_Pin */
  GPIO_InitStruct.Pin = LEDG_Pin;
 8003852:	2301      	movs	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003856:	2301      	movs	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385e:	2300      	movs	r3, #0
 8003860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDG_GPIO_Port, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	480c      	ldr	r0, [pc, #48]	; (800389c <MX_GPIO_Init+0x128>)
 800386a:	f7fd fabb 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWNR_Pin UPR_Pin */
  GPIO_InitStruct.Pin = DOWNR_Pin|UPR_Pin;
 800386e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003874:	2301      	movs	r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	4619      	mov	r1, r3
 8003886:	4806      	ldr	r0, [pc, #24]	; (80038a0 <MX_GPIO_Init+0x12c>)
 8003888:	f7fd faac 	bl	8000de4 <HAL_GPIO_Init>

}
 800388c:	bf00      	nop
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	40020800 	.word	0x40020800
 800389c:	40020400 	.word	0x40020400
 80038a0:	40020000 	.word	0x40020000

080038a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_MspInit+0x4c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_MspInit+0x4c>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_MspInit+0x4c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_MspInit+0x4c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_MspInit+0x4c>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_MspInit+0x4c>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <HAL_I2C_MspInit+0x84>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12c      	bne.n	8003980 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_I2C_MspInit+0x88>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <HAL_I2C_MspInit+0x88>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_I2C_MspInit+0x88>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 8003942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003948:	2312      	movs	r3, #18
 800394a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800394c:	2301      	movs	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003954:	2304      	movs	r3, #4
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4619      	mov	r1, r3
 800395e:	480c      	ldr	r0, [pc, #48]	; (8003990 <HAL_I2C_MspInit+0x8c>)
 8003960:	f7fd fa40 	bl	8000de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_I2C_MspInit+0x88>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_I2C_MspInit+0x88>)
 800396e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003972:	6413      	str	r3, [r2, #64]	; 0x40
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_I2C_MspInit+0x88>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003980:	bf00      	nop
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40005400 	.word	0x40005400
 800398c:	40023800 	.word	0x40023800
 8003990:	40020400 	.word	0x40020400

08003994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <HAL_TIM_PWM_MspInit+0x64>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10e      	bne.n	80039c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_TIM_PWM_MspInit+0x68>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <HAL_TIM_PWM_MspInit+0x68>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_TIM_PWM_MspInit+0x68>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039c2:	e012      	b.n	80039ea <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <HAL_TIM_PWM_MspInit+0x6c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10d      	bne.n	80039ea <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_TIM_PWM_MspInit+0x68>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_TIM_PWM_MspInit+0x68>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	6453      	str	r3, [r2, #68]	; 0x44
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_TIM_PWM_MspInit+0x68>)
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40010400 	.word	0x40010400

08003a04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a24:	d12c      	bne.n	8003a80 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a2f      	ldr	r2, [pc, #188]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	4a28      	ldr	r2, [pc, #160]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6313      	str	r3, [r2, #48]	; 0x30
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 8003a5e:	2322      	movs	r3, #34	; 0x22
 8003a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a66:	2301      	movs	r3, #1
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a72:	f107 031c 	add.w	r3, r7, #28
 8003a76:	4619      	mov	r1, r3
 8003a78:	481d      	ldr	r0, [pc, #116]	; (8003af0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a7a:	f7fd f9b3 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a7e:	e030      	b.n	8003ae2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d12b      	bne.n	8003ae2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8003ac2:	23c0      	movs	r3, #192	; 0xc0
 8003ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aca:	2301      	movs	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	f107 031c 	add.w	r3, r7, #28
 8003ada:	4619      	mov	r1, r3
 8003adc:	4804      	ldr	r0, [pc, #16]	; (8003af0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ade:	f7fd f981 	bl	8000de4 <HAL_GPIO_Init>
}
 8003ae2:	bf00      	nop
 8003ae4:	3730      	adds	r7, #48	; 0x30
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40020000 	.word	0x40020000
 8003af4:	40000400 	.word	0x40000400

08003af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a25      	ldr	r2, [pc, #148]	; (8003bac <HAL_TIM_MspPostInit+0xb4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d11f      	bne.n	8003b5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_TIM_MspPostInit+0xb8>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_TIM_MspPostInit+0xb8>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <HAL_TIM_MspPostInit+0xb8>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = SERVO2_Pin|SERVO1_Pin;
 8003b36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4619      	mov	r1, r3
 8003b52:	4818      	ldr	r0, [pc, #96]	; (8003bb4 <HAL_TIM_MspPostInit+0xbc>)
 8003b54:	f7fd f946 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b58:	e023      	b.n	8003ba2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_TIM_MspPostInit+0xc0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d11e      	bne.n	8003ba2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_TIM_MspPostInit+0xb8>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <HAL_TIM_MspPostInit+0xb8>)
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
 8003b72:	6313      	str	r3, [r2, #48]	; 0x30
 8003b74:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_TIM_MspPostInit+0xb8>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTORL_Pin|MOTORR_Pin;
 8003b80:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b92:	2303      	movs	r3, #3
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4807      	ldr	r0, [pc, #28]	; (8003bbc <HAL_TIM_MspPostInit+0xc4>)
 8003b9e:	f7fd f921 	bl	8000de4 <HAL_GPIO_Init>
}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40020800 	.word	0x40020800

08003bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 031c 	add.w	r3, r7, #28
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a69      	ldr	r2, [pc, #420]	; (8003d84 <HAL_UART_MspInit+0x1c4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d163      	bne.n	8003caa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	4b68      	ldr	r3, [pc, #416]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a67      	ldr	r2, [pc, #412]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	4b61      	ldr	r3, [pc, #388]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a60      	ldr	r2, [pc, #384]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = CP2102_TX_Pin|CP2102_RX_Pin;
 8003c1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c24:	2301      	movs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c30:	f107 031c 	add.w	r3, r7, #28
 8003c34:	4619      	mov	r1, r3
 8003c36:	4855      	ldr	r0, [pc, #340]	; (8003d8c <HAL_UART_MspInit+0x1cc>)
 8003c38:	f7fd f8d4 	bl	8000de4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003c3c:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c3e:	4a55      	ldr	r2, [pc, #340]	; (8003d94 <HAL_UART_MspInit+0x1d4>)
 8003c40:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003c42:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c48:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c4a:	4b51      	ldr	r3, [pc, #324]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c50:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c56:	4b4e      	ldr	r3, [pc, #312]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c5c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c5e:	4b4c      	ldr	r3, [pc, #304]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c64:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003c6a:	4b49      	ldr	r3, [pc, #292]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c70:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c76:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003c7c:	4844      	ldr	r0, [pc, #272]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c7e:	f7fc fda7 	bl	80007d0 <HAL_DMA_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003c88:	f7ff fe0c 	bl	80038a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34
 8003c92:	4a3f      	ldr	r2, [pc, #252]	; (8003d90 <HAL_UART_MspInit+0x1d0>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2034      	movs	r0, #52	; 0x34
 8003c9e:	f7fc fd60 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003ca2:	2034      	movs	r0, #52	; 0x34
 8003ca4:	f7fc fd79 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ca8:	e067      	b.n	8003d7a <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART3)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3a      	ldr	r2, [pc, #232]	; (8003d98 <HAL_UART_MspInit+0x1d8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d162      	bne.n	8003d7a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	4a32      	ldr	r2, [pc, #200]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc4:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003cda:	f043 0302 	orr.w	r3, r3, #2
 8003cde:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce0:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <HAL_UART_MspInit+0x1c8>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ZIGBEE_TX_Pin|ZIGBEE_RX_Pin;
 8003cec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cfe:	2307      	movs	r3, #7
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d02:	f107 031c 	add.w	r3, r7, #28
 8003d06:	4619      	mov	r1, r3
 8003d08:	4824      	ldr	r0, [pc, #144]	; (8003d9c <HAL_UART_MspInit+0x1dc>)
 8003d0a:	f7fd f86b 	bl	8000de4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d10:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <HAL_UART_MspInit+0x1e4>)
 8003d12:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d2e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003d3c:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d4e:	4814      	ldr	r0, [pc, #80]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d50:	f7fc fd3e 	bl	80007d0 <HAL_DMA_Init>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003d5a:	f7ff fda3 	bl	80038a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d62:	635a      	str	r2, [r3, #52]	; 0x34
 8003d64:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <HAL_UART_MspInit+0x1e0>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	2027      	movs	r0, #39	; 0x27
 8003d70:	f7fc fcf7 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d74:	2027      	movs	r0, #39	; 0x27
 8003d76:	f7fc fd10 	bl	800079a <HAL_NVIC_EnableIRQ>
}
 8003d7a:	bf00      	nop
 8003d7c:	3730      	adds	r7, #48	; 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40004c00 	.word	0x40004c00
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40020800 	.word	0x40020800
 8003d90:	2000002c 	.word	0x2000002c
 8003d94:	40026040 	.word	0x40026040
 8003d98:	40004800 	.word	0x40004800
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	200000cc 	.word	0x200000cc
 8003da4:	40026028 	.word	0x40026028

08003da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dba:	e7fe      	b.n	8003dba <HardFault_Handler+0x4>

08003dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dc0:	e7fe      	b.n	8003dc0 <MemManage_Handler+0x4>

08003dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dc6:	e7fe      	b.n	8003dc6 <BusFault_Handler+0x4>

08003dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dcc:	e7fe      	b.n	8003dcc <UsageFault_Handler+0x4>

08003dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dfc:	f7fc fbb6 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA1_Stream1_IRQHandler+0x10>)
 8003e0a:	f7fc fdb1 	bl	8000970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200000cc 	.word	0x200000cc

08003e18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA1_Stream2_IRQHandler+0x10>)
 8003e1e:	f7fc fda7 	bl	8000970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000002c 	.word	0x2000002c

08003e2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <USART3_IRQHandler+0x10>)
 8003e32:	f7fe fbef 	bl	8002614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2000012c 	.word	0x2000012c

08003e40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <UART4_IRQHandler+0x10>)
 8003e46:	f7fe fbe5 	bl	8002614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000240 	.word	0x20000240

08003e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <SystemInit+0x28>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <SystemInit+0x28>)
 8003e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <SystemInit+0x28>)
 8003e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e6e:	609a      	str	r2, [r3, #8]
#endif
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e86:	e003      	b.n	8003e90 <LoopCopyDataInit>

08003e88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e8e:	3104      	adds	r1, #4

08003e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e90:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e98:	d3f6      	bcc.n	8003e88 <CopyDataInit>
  ldr  r2, =_sbss
 8003e9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e9c:	e002      	b.n	8003ea4 <LoopFillZerobss>

08003e9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ea0:	f842 3b04 	str.w	r3, [r2], #4

08003ea4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ea6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ea8:	d3f9      	bcc.n	8003e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003eaa:	f7ff ffd3 	bl	8003e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eae:	f000 f811 	bl	8003ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eb2:	f7ff f96b 	bl	800318c <main>
  bx  lr    
 8003eb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003eb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003ebc:	08003f74 	.word	0x08003f74
  ldr  r0, =_sdata
 8003ec0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ec4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003ec8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003ecc:	200002c0 	.word	0x200002c0

08003ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ed0:	e7fe      	b.n	8003ed0 <ADC_IRQHandler>
	...

08003ed4 <__libc_init_array>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4e0d      	ldr	r6, [pc, #52]	; (8003f0c <__libc_init_array+0x38>)
 8003ed8:	4c0d      	ldr	r4, [pc, #52]	; (8003f10 <__libc_init_array+0x3c>)
 8003eda:	1ba4      	subs	r4, r4, r6
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	2500      	movs	r5, #0
 8003ee0:	42a5      	cmp	r5, r4
 8003ee2:	d109      	bne.n	8003ef8 <__libc_init_array+0x24>
 8003ee4:	4e0b      	ldr	r6, [pc, #44]	; (8003f14 <__libc_init_array+0x40>)
 8003ee6:	4c0c      	ldr	r4, [pc, #48]	; (8003f18 <__libc_init_array+0x44>)
 8003ee8:	f000 f820 	bl	8003f2c <_init>
 8003eec:	1ba4      	subs	r4, r4, r6
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	2500      	movs	r5, #0
 8003ef2:	42a5      	cmp	r5, r4
 8003ef4:	d105      	bne.n	8003f02 <__libc_init_array+0x2e>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003efc:	4798      	blx	r3
 8003efe:	3501      	adds	r5, #1
 8003f00:	e7ee      	b.n	8003ee0 <__libc_init_array+0xc>
 8003f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f06:	4798      	blx	r3
 8003f08:	3501      	adds	r5, #1
 8003f0a:	e7f2      	b.n	8003ef2 <__libc_init_array+0x1e>
 8003f0c:	08003f6c 	.word	0x08003f6c
 8003f10:	08003f6c 	.word	0x08003f6c
 8003f14:	08003f6c 	.word	0x08003f6c
 8003f18:	08003f70 	.word	0x08003f70

08003f1c <memset>:
 8003f1c:	4402      	add	r2, r0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <memset+0xa>
 8003f24:	4770      	bx	lr
 8003f26:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2a:	e7f9      	b.n	8003f20 <memset+0x4>

08003f2c <_init>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr

08003f38 <_fini>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr
