
UGV_STM_OLD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b0  080035b0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b8  080035b8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200001dc  0800379c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800379c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c790  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b17  00000000  00000000  0002c99c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  0002e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  0002f078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f634  00000000  00000000  0002fb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090ef  00000000  00000000  0004f194  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bef3c  00000000  00000000  00058283  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001171bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  0011723c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003474 	.word	0x08003474

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08003474 	.word	0x08003474

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <getdata>:

static uint16_t UARTlengthcount=0;
static uint8_t copystate=STOP;

void getdata()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	switch (copystate) {
 80004dc:	4b22      	ldr	r3, [pc, #136]	; (8000568 <getdata+0x90>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <getdata+0x12>
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d014      	beq.n	8000512 <getdata+0x3a>
			}
			else
				UARTbuffer[UARTlengthcount++]=UARTgetchar[0];
			break;
		default:
			break;
 80004e8:	e03c      	b.n	8000564 <getdata+0x8c>
			if(UARTgetchar[0]=='[')
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <getdata+0x94>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b5b      	cmp	r3, #91	; 0x5b
 80004f0:	d137      	bne.n	8000562 <getdata+0x8a>
				copystate=HANDLE;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <getdata+0x90>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
				UARTlengthcount=0;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <getdata+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	801a      	strh	r2, [r3, #0]
				memset(UARTbuffer,0,strlen(UARTbuffer));
 80004fe:	481d      	ldr	r0, [pc, #116]	; (8000574 <getdata+0x9c>)
 8000500:	f7ff fe62 	bl	80001c8 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	481a      	ldr	r0, [pc, #104]	; (8000574 <getdata+0x9c>)
 800050c:	f002 fef6 	bl	80032fc <memset>
			break;
 8000510:	e027      	b.n	8000562 <getdata+0x8a>
			if(UARTgetchar[0]==']')
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <getdata+0x94>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b5d      	cmp	r3, #93	; 0x5d
 8000518:	d106      	bne.n	8000528 <getdata+0x50>
				copystate=STOP;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <getdata+0x90>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
				newblockdata=1;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <getdata+0xa0>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
			break;
 8000526:	e01d      	b.n	8000564 <getdata+0x8c>
			else if(UARTgetchar[0]=='[')
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <getdata+0x94>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b5b      	cmp	r3, #91	; 0x5b
 800052e:	d10c      	bne.n	800054a <getdata+0x72>
				UARTlengthcount=0;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <getdata+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
				memset(UARTbuffer,0,strlen(UARTbuffer));
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <getdata+0x9c>)
 8000538:	f7ff fe46 	bl	80001c8 <strlen>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <getdata+0x9c>)
 8000544:	f002 feda 	bl	80032fc <memset>
			break;
 8000548:	e00c      	b.n	8000564 <getdata+0x8c>
				UARTbuffer[UARTlengthcount++]=UARTgetchar[0];
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <getdata+0x98>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	b291      	uxth	r1, r2
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <getdata+0x98>)
 8000554:	8011      	strh	r1, [r2, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <getdata+0x94>)
 800055a:	7819      	ldrb	r1, [r3, #0]
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <getdata+0x9c>)
 800055e:	5499      	strb	r1, [r3, r2]
			break;
 8000560:	e000      	b.n	8000564 <getdata+0x8c>
			break;
 8000562:	bf00      	nop
	}
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200001fa 	.word	0x200001fa
 800056c:	20000294 	.word	0x20000294
 8000570:	200001f8 	.word	0x200001f8
 8000574:	20000280 	.word	0x20000280
 8000578:	200001fb 	.word	0x200001fb

0800057c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <HAL_UART_RxCpltCallback+0x30>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10a      	bne.n	80005a4 <HAL_UART_RxCpltCallback+0x28>
	{
		if(newblockdata==0)
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_UART_RxCpltCallback+0x34>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <HAL_UART_RxCpltCallback+0x1e>
			getdata();
 8000596:	f7ff ff9f 	bl	80004d8 <getdata>
		HAL_UART_Receive_IT(&huart3, UARTgetchar, 1);
 800059a:	2201      	movs	r2, #1
 800059c:	4905      	ldr	r1, [pc, #20]	; (80005b4 <HAL_UART_RxCpltCallback+0x38>)
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <HAL_UART_RxCpltCallback+0x3c>)
 80005a0:	f002 f881 	bl	80026a6 <HAL_UART_Receive_IT>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40004800 	.word	0x40004800
 80005b0:	200001fb 	.word	0x200001fb
 80005b4:	20000294 	.word	0x20000294
 80005b8:	200001fc 	.word	0x200001fc

080005bc <sys_init>:

void sys_init()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=0;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <sys_init+0x48>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2200      	movs	r2, #0
 80005c6:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR4=0;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <sys_init+0x48>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(UPR_GPIO_Port, UPR_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <sys_init+0x4c>)
 80005d8:	f000 ff62 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UPL_GPIO_Port, UPL_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <sys_init+0x50>)
 80005e4:	f000 ff5c 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOWNL_GPIO_Port, DOWNL_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ee:	4807      	ldr	r0, [pc, #28]	; (800060c <sys_init+0x50>)
 80005f0:	f000 ff56 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOWNR_GPIO_Port, DOWNR_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <sys_init+0x4c>)
 80005fa:	f000 ff51 	bl	80014a0 <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000023c 	.word	0x2000023c
 8000608:	40020800 	.word	0x40020800
 800060c:	40020000 	.word	0x40020000

08000610 <MotorControlSpeed>:

void MotorControlSpeed(uint16_t SpeedMotorLeft,uint16_t SpeedMotorRight,uint8_t direct)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
 800061a:	460b      	mov	r3, r1
 800061c:	80bb      	strh	r3, [r7, #4]
 800061e:	4613      	mov	r3, r2
 8000620:	70fb      	strb	r3, [r7, #3]
	switch (direct) {
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d86b      	bhi.n	8000700 <MotorControlSpeed+0xf0>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <MotorControlSpeed+0x20>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	08000641 	.word	0x08000641
 8000634:	08000671 	.word	0x08000671
 8000638:	080006a1 	.word	0x080006a1
 800063c:	080006d1 	.word	0x080006d1
		case 0:
			HAL_GPIO_WritePin(UPR_GPIO_Port, UPR_Pin, SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	483b      	ldr	r0, [pc, #236]	; (8000734 <MotorControlSpeed+0x124>)
 8000648:	f000 ff2a 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UPL_GPIO_Port, UPL_Pin, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000652:	4839      	ldr	r0, [pc, #228]	; (8000738 <MotorControlSpeed+0x128>)
 8000654:	f000 ff24 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNL_GPIO_Port, DOWNL_Pin, RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	4836      	ldr	r0, [pc, #216]	; (8000738 <MotorControlSpeed+0x128>)
 8000660:	f000 ff1e 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNR_GPIO_Port, DOWNR_Pin, RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	4832      	ldr	r0, [pc, #200]	; (8000734 <MotorControlSpeed+0x124>)
 800066a:	f000 ff19 	bl	80014a0 <HAL_GPIO_WritePin>
			break;
 800066e:	e048      	b.n	8000702 <MotorControlSpeed+0xf2>
		case 1:
			HAL_GPIO_WritePin(UPR_GPIO_Port, UPR_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000676:	482f      	ldr	r0, [pc, #188]	; (8000734 <MotorControlSpeed+0x124>)
 8000678:	f000 ff12 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UPL_GPIO_Port, UPL_Pin, SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	482d      	ldr	r0, [pc, #180]	; (8000738 <MotorControlSpeed+0x128>)
 8000684:	f000 ff0c 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNL_GPIO_Port, DOWNL_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068e:	482a      	ldr	r0, [pc, #168]	; (8000738 <MotorControlSpeed+0x128>)
 8000690:	f000 ff06 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNR_GPIO_Port, DOWNR_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4826      	ldr	r0, [pc, #152]	; (8000734 <MotorControlSpeed+0x124>)
 800069a:	f000 ff01 	bl	80014a0 <HAL_GPIO_WritePin>
			break;
 800069e:	e030      	b.n	8000702 <MotorControlSpeed+0xf2>
		case 2:
			HAL_GPIO_WritePin(UPR_GPIO_Port, UPR_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	4823      	ldr	r0, [pc, #140]	; (8000734 <MotorControlSpeed+0x124>)
 80006a8:	f000 fefa 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UPL_GPIO_Port, UPL_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b2:	4821      	ldr	r0, [pc, #132]	; (8000738 <MotorControlSpeed+0x128>)
 80006b4:	f000 fef4 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNL_GPIO_Port, DOWNL_Pin, SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <MotorControlSpeed+0x128>)
 80006c0:	f000 feee 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNR_GPIO_Port, DOWNR_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	481a      	ldr	r0, [pc, #104]	; (8000734 <MotorControlSpeed+0x124>)
 80006ca:	f000 fee9 	bl	80014a0 <HAL_GPIO_WritePin>
			break;
 80006ce:	e018      	b.n	8000702 <MotorControlSpeed+0xf2>
		case 3:
			HAL_GPIO_WritePin(UPR_GPIO_Port, UPR_Pin, RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <MotorControlSpeed+0x124>)
 80006d8:	f000 fee2 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UPL_GPIO_Port, UPL_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e2:	4815      	ldr	r0, [pc, #84]	; (8000738 <MotorControlSpeed+0x128>)
 80006e4:	f000 fedc 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNL_GPIO_Port, DOWNL_Pin, SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MotorControlSpeed+0x128>)
 80006f0:	f000 fed6 	bl	80014a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DOWNR_GPIO_Port, DOWNR_Pin, SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	480e      	ldr	r0, [pc, #56]	; (8000734 <MotorControlSpeed+0x124>)
 80006fa:	f000 fed1 	bl	80014a0 <HAL_GPIO_WritePin>
			break;
 80006fe:	e000      	b.n	8000702 <MotorControlSpeed+0xf2>
		default:
			break;
 8000700:	bf00      	nop
	}
	SpeedMotorLeft*=30;
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	461a      	mov	r2, r3
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	80fb      	strh	r3, [r7, #6]
	SpeedMotorRight*=30;
 800070e:	88bb      	ldrh	r3, [r7, #4]
 8000710:	461a      	mov	r2, r3
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	80bb      	strh	r3, [r7, #4]
	htim3.Instance->CCR1=SpeedMotorLeft;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MotorControlSpeed+0x12c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	88fa      	ldrh	r2, [r7, #6]
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR4=SpeedMotorRight;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MotorControlSpeed+0x12c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	88ba      	ldrh	r2, [r7, #4]
 8000728:	641a      	str	r2, [r3, #64]	; 0x40
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020800 	.word	0x40020800
 8000738:	40020000 	.word	0x40020000
 800073c:	2000023c 	.word	0x2000023c

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fb6b 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f891 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f987 	bl	8000a60 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000752:	f000 f8f7 	bl	8000944 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000756:	f000 f959 	bl	8000a0c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  sys_init();
 800075a:	f7ff ff2f 	bl	80005bc <sys_init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800075e:	2100      	movs	r1, #0
 8000760:	483a      	ldr	r0, [pc, #232]	; (800084c <main+0x10c>)
 8000762:	f001 fb5d 	bl	8001e20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000766:	210c      	movs	r1, #12
 8000768:	4838      	ldr	r0, [pc, #224]	; (800084c <main+0x10c>)
 800076a:	f001 fb59 	bl	8001e20 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, UARTgetchar, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	4937      	ldr	r1, [pc, #220]	; (8000850 <main+0x110>)
 8000772:	4838      	ldr	r0, [pc, #224]	; (8000854 <main+0x114>)
 8000774:	f001 ff97 	bl	80026a6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(newblockdata==1)
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <main+0x118>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d1fb      	bne.n	8000778 <main+0x38>
 	  {
		  int UARTcheckint;
		  char UARTcheck[1];
		  UARTcheck[0]=UARTbuffer[7];
 8000780:	4b36      	ldr	r3, [pc, #216]	; (800085c <main+0x11c>)
 8000782:	79db      	ldrb	r3, [r3, #7]
 8000784:	733b      	strb	r3, [r7, #12]
		  UARTcheckint=strtol(UARTcheck,&UARTcheck,10);
 8000786:	f107 010c 	add.w	r1, r7, #12
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	220a      	movs	r2, #10
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fe37 	bl	8003404 <strtol>
 8000796:	6138      	str	r0, [r7, #16]
  		  if(strlen(UARTbuffer)==UARTcheckint)
 8000798:	4830      	ldr	r0, [pc, #192]	; (800085c <main+0x11c>)
 800079a:	f7ff fd15 	bl	80001c8 <strlen>
 800079e:	4602      	mov	r2, r0
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d14d      	bne.n	8000842 <main+0x102>
  		  {
  			  char SpeedLeftChar[4],SpeedRightChar[4],directChar[2];
  			  HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80007a6:	2110      	movs	r1, #16
 80007a8:	482d      	ldr	r0, [pc, #180]	; (8000860 <main+0x120>)
 80007aa:	f000 fe92 	bl	80014d2 <HAL_GPIO_TogglePin>
  			  for (int var = 0; var < maxblock; var++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	e015      	b.n	80007e0 <main+0xa0>
  			  {
  			  	  SpeedLeftChar[var]=UARTbuffer[var];
 80007b4:	4a29      	ldr	r2, [pc, #164]	; (800085c <main+0x11c>)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	4413      	add	r3, r2
 80007ba:	7819      	ldrb	r1, [r3, #0]
 80007bc:	f107 0208 	add.w	r2, r7, #8
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	460a      	mov	r2, r1
 80007c6:	701a      	strb	r2, [r3, #0]
  			  	  SpeedRightChar[var]=UARTbuffer[var + maxblock];
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3303      	adds	r3, #3
 80007cc:	4a23      	ldr	r2, [pc, #140]	; (800085c <main+0x11c>)
 80007ce:	5cd1      	ldrb	r1, [r2, r3]
 80007d0:	1d3a      	adds	r2, r7, #4
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	4413      	add	r3, r2
 80007d6:	460a      	mov	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
  			  for (int var = 0; var < maxblock; var++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	dde6      	ble.n	80007b4 <main+0x74>
  			  }
  			  directChar[0]=UARTbuffer[maxblock*2];
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <main+0x11c>)
 80007e8:	799b      	ldrb	r3, [r3, #6]
 80007ea:	703b      	strb	r3, [r7, #0]
  			  SpeedLeft=strtol(SpeedLeftChar,&SpeedLeftChar,10);
 80007ec:	f107 0108 	add.w	r1, r7, #8
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	220a      	movs	r2, #10
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fe04 	bl	8003404 <strtol>
 80007fc:	4603      	mov	r3, r0
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <main+0x124>)
 8000802:	701a      	strb	r2, [r3, #0]
  			  SpeedRight=strtol(SpeedRightChar,&SpeedRightChar,10);
 8000804:	1d39      	adds	r1, r7, #4
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	220a      	movs	r2, #10
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fdfa 	bl	8003404 <strtol>
 8000810:	4603      	mov	r3, r0
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <main+0x128>)
 8000816:	701a      	strb	r2, [r3, #0]
  			  direct=strtol(directChar,&directChar,10);
 8000818:	4639      	mov	r1, r7
 800081a:	463b      	mov	r3, r7
 800081c:	220a      	movs	r2, #10
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fdf0 	bl	8003404 <strtol>
 8000824:	4603      	mov	r3, r0
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <main+0x12c>)
 800082a:	701a      	strb	r2, [r3, #0]
  			  MotorControlSpeed(SpeedLeft, SpeedRight,direct);
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <main+0x124>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b298      	uxth	r0, r3
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <main+0x128>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b299      	uxth	r1, r3
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <main+0x12c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	f7ff fee7 	bl	8000610 <MotorControlSpeed>
  		  }
  		  newblockdata=0;
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <main+0x118>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
	  if(newblockdata==1)
 8000848:	e796      	b.n	8000778 <main+0x38>
 800084a:	bf00      	nop
 800084c:	2000023c 	.word	0x2000023c
 8000850:	20000294 	.word	0x20000294
 8000854:	200001fc 	.word	0x200001fc
 8000858:	200001fb 	.word	0x200001fb
 800085c:	20000280 	.word	0x20000280
 8000860:	40020800 	.word	0x40020800
 8000864:	2000027d 	.word	0x2000027d
 8000868:	20000295 	.word	0x20000295
 800086c:	2000027c 	.word	0x2000027c

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fd3c 	bl	80032fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <SystemClock_Config+0xcc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <SystemClock_Config+0xd0>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <SystemClock_Config+0xd0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d8:	2302      	movs	r3, #2
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008dc:	2300      	movs	r3, #0
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e0:	2308      	movs	r3, #8
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008e4:	23a8      	movs	r3, #168	; 0xa8
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fe07 	bl	8001508 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000900:	f000 f93a 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2105      	movs	r1, #5
 8000922:	4618      	mov	r0, r3
 8000924:	f001 f860 	bl	80019e8 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800092e:	f000 f923 	bl	8000b78 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <MX_TIM3_Init+0xc4>)
 800096a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <MX_TIM3_Init+0xc0>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3359;
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_TIM3_Init+0xc0>)
 800097a:	f640 521f 	movw	r2, #3359	; 0xd1f
 800097e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098c:	481d      	ldr	r0, [pc, #116]	; (8000a04 <MX_TIM3_Init+0xc0>)
 800098e:	f001 fa1b 	bl	8001dc8 <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f8ee 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4619      	mov	r1, r3
 80009aa:	4816      	ldr	r0, [pc, #88]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009ac:	f001 fdb2 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009b6:	f000 f8df 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	; 0x60
 80009bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009d2:	f001 fa63 	bl	8001e9c <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009dc:	f000 f8cc 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	220c      	movs	r2, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009e8:	f001 fa58 	bl	8001e9c <HAL_TIM_PWM_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009f2:	f000 f8c1 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009f8:	f000 f910 	bl	8000c1c <HAL_TIM_MspPostInit>

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000023c 	.word	0x2000023c
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART3_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a44:	f001 fde2 	bl	800260c <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f893 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001fc 	.word	0x200001fc
 8000a5c:	40004800 	.word	0x40004800

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a2c      	ldr	r2, [pc, #176]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MX_GPIO_Init+0x108>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDR_Pin|LEDG_Pin|DOWNR_Pin|UPR_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <MX_GPIO_Init+0x10c>)
 8000aee:	f000 fcd7 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2101      	movs	r1, #1
 8000af6:	481e      	ldr	r0, [pc, #120]	; (8000b70 <MX_GPIO_Init+0x110>)
 8000af8:	f000 fcd2 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOWNL_Pin|UPL_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b02:	481c      	ldr	r0, [pc, #112]	; (8000b74 <MX_GPIO_Init+0x114>)
 8000b04:	f000 fccc 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin DOWNR_Pin UPR_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|DOWNR_Pin|UPR_Pin;
 8000b08:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <MX_GPIO_Init+0x10c>)
 8000b22:	f000 fb23 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <MX_GPIO_Init+0x110>)
 8000b3e:	f000 fb15 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWNL_Pin UPL_Pin */
  GPIO_InitStruct.Pin = DOWNL_Pin|UPL_Pin;
 8000b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_GPIO_Init+0x114>)
 8000b5c:	f000 fb06 	bl	800116c <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020000 	.word	0x40020000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d10d      	bne.n	8000c06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_TIM_PWM_MspInit+0x40>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_TIM_PWM_MspInit+0x40>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_TIM_PWM_MspInit+0x40>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40000400 	.word	0x40000400
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d11e      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWMR_Pin|PWML_Pin;
 8000c5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_TIM_MspPostInit+0x70>)
 8000c78:	f000 fa78 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40000400 	.word	0x40000400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020800 	.word	0x40020800

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_UART_MspInit+0x94>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d134      	bne.n	8000d1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4809      	ldr	r0, [pc, #36]	; (8000d2c <HAL_UART_MspInit+0x9c>)
 8000d08:	f000 fa30 	bl	800116c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2027      	movs	r0, #39	; 0x27
 8000d12:	f000 f9d2 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d16:	2027      	movs	r0, #39	; 0x27
 8000d18:	f000 f9eb 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004800 	.word	0x40004800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f89e 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <USART3_IRQHandler+0x10>)
 8000d92:	f001 fcdd 	bl	8002750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001fc 	.word	0x200001fc

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <SystemInit+0x28>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <SystemInit+0x28>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SystemInit+0x28>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
#endif
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dd2:	e003      	b.n	8000ddc <LoopCopyDataInit>

08000dd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dda:	3104      	adds	r1, #4

08000ddc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000de0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000de2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de4:	d3f6      	bcc.n	8000dd4 <CopyDataInit>
  ldr  r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000de8:	e002      	b.n	8000df0 <LoopFillZerobss>

08000dea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dec:	f842 3b04 	str.w	r3, [r2], #4

08000df0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000df2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df4:	d3f9      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ffd3 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f002 fa5b 	bl	80032b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fc9f 	bl	8000740 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e08:	080035c0 	.word	0x080035c0
  ldr  r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e10:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000e14:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000e18:	2000029c 	.word	0x2000029c

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f92b 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe98 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f943 	bl	800110e <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f90b 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000298 	.word	0x20000298

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000298 	.word	0x20000298

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff3e 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff31 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d004      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e00c      	b.n	800115e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2205      	movs	r2, #5
 8001148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e16b      	b.n	8001460 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 815a 	bne.w	800145a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d00b      	beq.n	80011c6 <HAL_GPIO_Init+0x5a>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ba:	2b11      	cmp	r3, #17
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d130      	bne.n	8001228 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0xfc>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80b4 	beq.w	800145a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_GPIO_Init+0x308>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <HAL_GPIO_Init+0x308>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x308>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <HAL_GPIO_Init+0x30c>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_GPIO_Init+0x310>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_GPIO_Init+0x314>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_GPIO_Init+0x318>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <HAL_GPIO_Init+0x31c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4d      	ldr	r2, [pc, #308]	; (800148c <HAL_GPIO_Init+0x320>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x324>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x212>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <HAL_GPIO_Init+0x328>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <HAL_GPIO_Init+0x32c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x20a>
 8001372:	2307      	movs	r3, #7
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001376:	2308      	movs	r3, #8
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4934      	ldr	r1, [pc, #208]	; (8001478 <HAL_GPIO_Init+0x30c>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <HAL_GPIO_Init+0x330>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d6:	4a31      	ldr	r2, [pc, #196]	; (800149c <HAL_GPIO_Init+0x330>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_GPIO_Init+0x330>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_GPIO_Init+0x330>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_GPIO_Init+0x330>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <HAL_GPIO_Init+0x330>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HAL_GPIO_Init+0x330>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <HAL_GPIO_Init+0x330>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae90 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40021400 	.word	0x40021400
 8001494:	40021800 	.word	0x40021800
 8001498:	40021c00 	.word	0x40021c00
 800149c:	40013c00 	.word	0x40013c00

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	401a      	ands	r2, r3
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d104      	bne.n	80014f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e25b      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001526:	4ba3      	ldr	r3, [pc, #652]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4ba0      	ldr	r3, [pc, #640]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153a:	2b08      	cmp	r3, #8
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b9d      	ldr	r3, [pc, #628]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b99      	ldr	r3, [pc, #612]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d05b      	beq.n	8001610 <HAL_RCC_OscConfig+0x108>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e236      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x74>
 800156e:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a90      	ldr	r2, [pc, #576]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a8a      	ldr	r2, [pc, #552]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a87      	ldr	r2, [pc, #540]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a83      	ldr	r2, [pc, #524]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a80      	ldr	r2, [pc, #512]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc94 	bl	8000eec <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fc90 	bl	8000eec <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1fb      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fc80 	bl	8000eec <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fc7c 	bl	8000eec <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1e7      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0xe8>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800161e:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1bb      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4952      	ldr	r1, [pc, #328]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e03a      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <HAL_RCC_OscConfig+0x2b0>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fc35 	bl	8000eec <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fc31 	bl	8000eec <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e19c      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4940      	ldr	r1, [pc, #256]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_RCC_OscConfig+0x2b0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc14 	bl	8000eec <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc10 	bl	8000eec <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e17b      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d030      	beq.n	8001754 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d016      	beq.n	8001728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_RCC_OscConfig+0x2b4>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fbf4 	bl	8000eec <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fbf0 	bl	8000eec <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e15b      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x200>
 8001726:	e015      	b.n	8001754 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x2b4>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fbdd 	bl	8000eec <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fbd9 	bl	8000eec <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e144      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a0 	beq.w	80018a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10f      	bne.n	8001792 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x2b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d121      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_RCC_OscConfig+0x2b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_RCC_OscConfig+0x2b8>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb9f 	bl	8000eec <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e011      	b.n	80017d6 <HAL_RCC_OscConfig+0x2ce>
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470000 	.word	0x42470000
 80017bc:	42470e80 	.word	0x42470e80
 80017c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff fb92 	bl	8000eec <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0fd      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b81      	ldr	r3, [pc, #516]	; (80019dc <HAL_RCC_OscConfig+0x4d4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d106      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a7c      	ldr	r2, [pc, #496]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
 80017f6:	e01c      	b.n	8001832 <HAL_RCC_OscConfig+0x32a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0x312>
 8001800:	4b77      	ldr	r3, [pc, #476]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	4a76      	ldr	r2, [pc, #472]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6713      	str	r3, [r2, #112]	; 0x70
 800180c:	4b74      	ldr	r3, [pc, #464]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a73      	ldr	r2, [pc, #460]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
 8001818:	e00b      	b.n	8001832 <HAL_RCC_OscConfig+0x32a>
 800181a:	4b71      	ldr	r3, [pc, #452]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a70      	ldr	r2, [pc, #448]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	4b6e      	ldr	r3, [pc, #440]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a6d      	ldr	r2, [pc, #436]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d015      	beq.n	8001866 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff fb57 	bl	8000eec <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff fb53 	bl	8000eec <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0bc      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ee      	beq.n	8001842 <HAL_RCC_OscConfig+0x33a>
 8001864:	e014      	b.n	8001890 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb41 	bl	8000eec <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fb3d 	bl	8000eec <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0a6      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d105      	bne.n	80018a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001896:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a51      	ldr	r2, [pc, #324]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 800189c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8092 	beq.w	80019d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d05c      	beq.n	8001972 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d141      	bne.n	8001944 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c0:	4b48      	ldr	r3, [pc, #288]	; (80019e4 <HAL_RCC_OscConfig+0x4dc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff fb11 	bl	8000eec <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff fb0d 	bl	8000eec <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e078      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e0:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	019b      	lsls	r3, r3, #6
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	061b      	lsls	r3, r3, #24
 8001910:	4933      	ldr	r1, [pc, #204]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001916:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_RCC_OscConfig+0x4dc>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fae6 	bl	8000eec <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fae2 	bl	8000eec <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04d      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x41c>
 8001942:	e045      	b.n	80019d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x4dc>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff facf 	bl	8000eec <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff facb 	bl	8000eec <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e036      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x44a>
 8001970:	e02e      	b.n	80019d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e029      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_RCC_OscConfig+0x4d8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	429a      	cmp	r2, r3
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d115      	bne.n	80019cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019a6:	4013      	ands	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d10d      	bne.n	80019cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40007000 	.word	0x40007000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470060 	.word	0x42470060

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0cc      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d90c      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d044      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e067      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4934      	ldr	r1, [pc, #208]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff fa08 	bl	8000eec <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff fa04 	bl	8000eec <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d20c      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f821 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b72:	4601      	mov	r1, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	fa21 f303 	lsr.w	r3, r1, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f968 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	0800348c 	.word	0x0800348c
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d007      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x32>
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d008      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x38>
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 80b4 	bne.w	8001d48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001be2:	60bb      	str	r3, [r7, #8]
       break;
 8001be4:	e0b3      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001be8:	60bb      	str	r3, [r7, #8]
      break;
 8001bea:	e0b0      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bec:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf6:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d04a      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	f04f 0400 	mov.w	r4, #0
 8001c0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	ea03 0501 	and.w	r5, r3, r1
 8001c18:	ea04 0602 	and.w	r6, r4, r2
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4632      	mov	r2, r6
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	f04f 0400 	mov.w	r4, #0
 8001c28:	0154      	lsls	r4, r2, #5
 8001c2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c2e:	014b      	lsls	r3, r1, #5
 8001c30:	4619      	mov	r1, r3
 8001c32:	4622      	mov	r2, r4
 8001c34:	1b49      	subs	r1, r1, r5
 8001c36:	eb62 0206 	sbc.w	r2, r2, r6
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	f04f 0400 	mov.w	r4, #0
 8001c42:	0194      	lsls	r4, r2, #6
 8001c44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c48:	018b      	lsls	r3, r1, #6
 8001c4a:	1a5b      	subs	r3, r3, r1
 8001c4c:	eb64 0402 	sbc.w	r4, r4, r2
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	00e2      	lsls	r2, r4, #3
 8001c5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c5e:	00d9      	lsls	r1, r3, #3
 8001c60:	460b      	mov	r3, r1
 8001c62:	4614      	mov	r4, r2
 8001c64:	195b      	adds	r3, r3, r5
 8001c66:	eb44 0406 	adc.w	r4, r4, r6
 8001c6a:	f04f 0100 	mov.w	r1, #0
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	02a2      	lsls	r2, r4, #10
 8001c74:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c78:	0299      	lsls	r1, r3, #10
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4621      	mov	r1, r4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f04f 0400 	mov.w	r4, #0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	f7fe faa4 	bl	80001d8 <__aeabi_uldivmod>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e049      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	f04f 0400 	mov.w	r4, #0
 8001ca2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	ea03 0501 	and.w	r5, r3, r1
 8001cae:	ea04 0602 	and.w	r6, r4, r2
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	4632      	mov	r2, r6
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	f04f 0400 	mov.w	r4, #0
 8001cbe:	0154      	lsls	r4, r2, #5
 8001cc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cc4:	014b      	lsls	r3, r1, #5
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4622      	mov	r2, r4
 8001cca:	1b49      	subs	r1, r1, r5
 8001ccc:	eb62 0206 	sbc.w	r2, r2, r6
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	f04f 0400 	mov.w	r4, #0
 8001cd8:	0194      	lsls	r4, r2, #6
 8001cda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cde:	018b      	lsls	r3, r1, #6
 8001ce0:	1a5b      	subs	r3, r3, r1
 8001ce2:	eb64 0402 	sbc.w	r4, r4, r2
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	00e2      	lsls	r2, r4, #3
 8001cf0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cf4:	00d9      	lsls	r1, r3, #3
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	195b      	adds	r3, r3, r5
 8001cfc:	eb44 0406 	adc.w	r4, r4, r6
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	02a2      	lsls	r2, r4, #10
 8001d0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d0e:	0299      	lsls	r1, r3, #10
 8001d10:	460b      	mov	r3, r1
 8001d12:	4614      	mov	r4, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	4621      	mov	r1, r4
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f04f 0400 	mov.w	r4, #0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4623      	mov	r3, r4
 8001d22:	f7fe fa59 	bl	80001d8 <__aeabi_uldivmod>
 8001d26:	4603      	mov	r3, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	60bb      	str	r3, [r7, #8]
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d4a:	60bb      	str	r3, [r7, #8]
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	00f42400 	.word	0x00f42400

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	0800349c 	.word	0x0800349c

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffdc 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	0800349c 	.word	0x0800349c

08001dc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01d      	b.n	8001e16 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fef2 	bl	8000bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 f90e 	bl	8002028 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fb48 	bl	80024c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_TIM_PWM_Start+0x74>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_PWM_Start+0x2c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_TIM_PWM_Start+0x78>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_TIM_PWM_Start+0x30>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_TIM_PWM_Start+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b06      	cmp	r3, #6
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e0b4      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	f200 809f 	bhi.w	800200c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001f09 	.word	0x08001f09
 8001ed8:	0800200d 	.word	0x0800200d
 8001edc:	0800200d 	.word	0x0800200d
 8001ee0:	0800200d 	.word	0x0800200d
 8001ee4:	08001f49 	.word	0x08001f49
 8001ee8:	0800200d 	.word	0x0800200d
 8001eec:	0800200d 	.word	0x0800200d
 8001ef0:	0800200d 	.word	0x0800200d
 8001ef4:	08001f8b 	.word	0x08001f8b
 8001ef8:	0800200d 	.word	0x0800200d
 8001efc:	0800200d 	.word	0x0800200d
 8001f00:	0800200d 	.word	0x0800200d
 8001f04:	08001fcb 	.word	0x08001fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f92a 	bl	8002168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0208 	orr.w	r2, r2, #8
 8001f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0204 	bic.w	r2, r2, #4
 8001f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6999      	ldr	r1, [r3, #24]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	619a      	str	r2, [r3, #24]
      break;
 8001f46:	e062      	b.n	800200e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f97a 	bl	8002248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6999      	ldr	r1, [r3, #24]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	021a      	lsls	r2, r3, #8
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	619a      	str	r2, [r3, #24]
      break;
 8001f88:	e041      	b.n	800200e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f9cf 	bl	8002334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0208 	orr.w	r2, r2, #8
 8001fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0204 	bic.w	r2, r2, #4
 8001fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69d9      	ldr	r1, [r3, #28]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	61da      	str	r2, [r3, #28]
      break;
 8001fc8:	e021      	b.n	800200e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fa23 	bl	800241c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69d9      	ldr	r1, [r3, #28]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	021a      	lsls	r2, r3, #8
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	61da      	str	r2, [r3, #28]
      break;
 800200a:	e000      	b.n	800200e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800200c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	; (800213c <TIM_Base_SetConfig+0x114>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d00f      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <TIM_Base_SetConfig+0x118>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00b      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <TIM_Base_SetConfig+0x11c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <TIM_Base_SetConfig+0x120>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3a      	ldr	r2, [pc, #232]	; (800214c <TIM_Base_SetConfig+0x124>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2f      	ldr	r2, [pc, #188]	; (800213c <TIM_Base_SetConfig+0x114>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d027      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <TIM_Base_SetConfig+0x118>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d023      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2b      	ldr	r2, [pc, #172]	; (8002144 <TIM_Base_SetConfig+0x11c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <TIM_Base_SetConfig+0x120>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a29      	ldr	r2, [pc, #164]	; (800214c <TIM_Base_SetConfig+0x124>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d017      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <TIM_Base_SetConfig+0x128>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <TIM_Base_SetConfig+0x12c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00f      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <TIM_Base_SetConfig+0x130>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <TIM_Base_SetConfig+0x134>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a24      	ldr	r2, [pc, #144]	; (8002160 <TIM_Base_SetConfig+0x138>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d003      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <TIM_Base_SetConfig+0x13c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d108      	bne.n	80020ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <TIM_Base_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0xf8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <TIM_Base_SetConfig+0x124>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d103      	bne.n	8002128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	615a      	str	r2, [r3, #20]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40000c00 	.word	0x40000c00
 800214c:	40010400 	.word	0x40010400
 8002150:	40014000 	.word	0x40014000
 8002154:	40014400 	.word	0x40014400
 8002158:	40014800 	.word	0x40014800
 800215c:	40001800 	.word	0x40001800
 8002160:	40001c00 	.word	0x40001c00
 8002164:	40002000 	.word	0x40002000

08002168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f023 0201 	bic.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f023 0302 	bic.w	r3, r3, #2
 80021b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <TIM_OC1_SetConfig+0xd8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_OC1_SetConfig+0x64>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <TIM_OC1_SetConfig+0xdc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d10c      	bne.n	80021e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f023 0308 	bic.w	r3, r3, #8
 80021d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a15      	ldr	r2, [pc, #84]	; (8002240 <TIM_OC1_SetConfig+0xd8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_OC1_SetConfig+0x8e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <TIM_OC1_SetConfig+0xdc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d111      	bne.n	800221a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	621a      	str	r2, [r3, #32]
}
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40010000 	.word	0x40010000
 8002244:	40010400 	.word	0x40010400

08002248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f023 0210 	bic.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0320 	bic.w	r3, r3, #32
 8002292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <TIM_OC2_SetConfig+0xe4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_OC2_SetConfig+0x68>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <TIM_OC2_SetConfig+0xe8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d10d      	bne.n	80022cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <TIM_OC2_SetConfig+0xe4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_OC2_SetConfig+0x94>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a16      	ldr	r2, [pc, #88]	; (8002330 <TIM_OC2_SetConfig+0xe8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d113      	bne.n	8002304 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40010400 	.word	0x40010400

08002334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800237c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a21      	ldr	r2, [pc, #132]	; (8002414 <TIM_OC3_SetConfig+0xe0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d003      	beq.n	800239a <TIM_OC3_SetConfig+0x66>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <TIM_OC3_SetConfig+0xe4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10d      	bne.n	80023b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <TIM_OC3_SetConfig+0xe0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <TIM_OC3_SetConfig+0x92>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a15      	ldr	r2, [pc, #84]	; (8002418 <TIM_OC3_SetConfig+0xe4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d113      	bne.n	80023ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	621a      	str	r2, [r3, #32]
}
 8002408:	bf00      	nop
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40010000 	.word	0x40010000
 8002418:	40010400 	.word	0x40010400

0800241c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	031b      	lsls	r3, r3, #12
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <TIM_OC4_SetConfig+0xa4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_OC4_SetConfig+0x68>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <TIM_OC4_SetConfig+0xa8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d109      	bne.n	8002498 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800248a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	621a      	str	r2, [r3, #32]
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40010400 	.word	0x40010400

080024c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	401a      	ands	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e05a      	b.n	80025e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d022      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d01d      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d018      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00e      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d004      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a15      	ldr	r2, [pc, #84]	; (8002608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10c      	bne.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40000800 	.word	0x40000800
 80025fc:	40000c00 	.word	0x40000c00
 8002600:	40010400 	.word	0x40010400
 8002604:	40014000 	.word	0x40014000
 8002608:	40001800 	.word	0x40001800

0800260c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e03f      	b.n	800269e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fb2c 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fab3 	bl	8002bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	4613      	mov	r3, r2
 80026b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d140      	bne.n	8002742 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_UART_Receive_IT+0x26>
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e039      	b.n	8002744 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_UART_Receive_IT+0x38>
 80026da:	2302      	movs	r3, #2
 80026dc:	e032      	b.n	8002744 <HAL_UART_Receive_IT+0x9e>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2222      	movs	r2, #34	; 0x22
 8002702:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0220 	orr.w	r2, r2, #32
 800273c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_UART_IRQHandler+0x52>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f98c 	bl	8002ab8 <UART_Receive_IT>
      return;
 80027a0:	e0d1      	b.n	8002946 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80b0 	beq.w	800290a <HAL_UART_IRQHandler+0x1ba>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <HAL_UART_IRQHandler+0x70>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80a5 	beq.w	800290a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_UART_IRQHandler+0x90>
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_UART_IRQHandler+0xb0>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	f043 0202 	orr.w	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_UART_IRQHandler+0xd0>
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00f      	beq.n	800284a <HAL_UART_IRQHandler+0xfa>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d104      	bne.n	800283e <HAL_UART_IRQHandler+0xee>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	f043 0208 	orr.w	r2, r3, #8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d078      	beq.n	8002944 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_UART_IRQHandler+0x11c>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f926 	bl	8002ab8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <HAL_UART_IRQHandler+0x144>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d031      	beq.n	80028f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f86f 	bl	8002978 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d123      	bne.n	80028f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c4:	4a21      	ldr	r2, [pc, #132]	; (800294c <HAL_UART_IRQHandler+0x1fc>)
 80028c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fc2a 	bl	8001126 <HAL_DMA_Abort_IT>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d016      	beq.n	8002906 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028e2:	4610      	mov	r0, r2
 80028e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e6:	e00e      	b.n	8002906 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f83b 	bl	8002964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ee:	e00a      	b.n	8002906 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f837 	bl	8002964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f6:	e006      	b.n	8002906 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f833 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002904:	e01e      	b.n	8002944 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002906:	bf00      	nop
    return;
 8002908:	e01c      	b.n	8002944 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_UART_IRQHandler+0x1d6>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f85c 	bl	80029dc <UART_Transmit_IT>
    return;
 8002924:	e00f      	b.n	8002946 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_UART_IRQHandler+0x1f6>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8a4 	bl	8002a88 <UART_EndTransmit_IT>
    return;
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002944:	bf00      	nop
  }
}
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	080029b5 	.word	0x080029b5

08002950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800298e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff ffc8 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b21      	cmp	r3, #33	; 0x21
 80029ee:	d144      	bne.n	8002a7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d11a      	bne.n	8002a30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	1c9a      	adds	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	621a      	str	r2, [r3, #32]
 8002a22:	e00e      	b.n	8002a42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	621a      	str	r2, [r3, #32]
 8002a2e:	e008      	b.n	8002a42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	1c59      	adds	r1, r3, #1
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6211      	str	r1, [r2, #32]
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e000      	b.n	8002a7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff51 	bl	8002950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b22      	cmp	r3, #34	; 0x22
 8002aca:	d171      	bne.n	8002bb0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad4:	d123      	bne.n	8002b1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10e      	bne.n	8002b02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	1c9a      	adds	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
 8002b00:	e029      	b.n	8002b56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1c:	e01b      	b.n	8002b56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6858      	ldr	r0, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	1c59      	adds	r1, r3, #1
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6291      	str	r1, [r2, #40]	; 0x28
 8002b36:	b2c2      	uxtb	r2, r0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e00c      	b.n	8002b56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	1c58      	adds	r0, r3, #1
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	6288      	str	r0, [r1, #40]	; 0x28
 8002b4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4619      	mov	r1, r3
 8002b64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d120      	bne.n	8002bac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0220 	bic.w	r2, r2, #32
 8002b78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fcea 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e002      	b.n	8002bb2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bfe:	f023 030c 	bic.w	r3, r3, #12
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	68f9      	ldr	r1, [r7, #12]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2a:	f040 818b 	bne.w	8002f44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4ac1      	ldr	r2, [pc, #772]	; (8002f38 <UART_SetConfig+0x37c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d005      	beq.n	8002c44 <UART_SetConfig+0x88>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4abf      	ldr	r2, [pc, #764]	; (8002f3c <UART_SetConfig+0x380>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f040 80bd 	bne.w	8002dbe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c44:	f7ff f8ac 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002c48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	461d      	mov	r5, r3
 8002c4e:	f04f 0600 	mov.w	r6, #0
 8002c52:	46a8      	mov	r8, r5
 8002c54:	46b1      	mov	r9, r6
 8002c56:	eb18 0308 	adds.w	r3, r8, r8
 8002c5a:	eb49 0409 	adc.w	r4, r9, r9
 8002c5e:	4698      	mov	r8, r3
 8002c60:	46a1      	mov	r9, r4
 8002c62:	eb18 0805 	adds.w	r8, r8, r5
 8002c66:	eb49 0906 	adc.w	r9, r9, r6
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c7e:	4688      	mov	r8, r1
 8002c80:	4691      	mov	r9, r2
 8002c82:	eb18 0005 	adds.w	r0, r8, r5
 8002c86:	eb49 0106 	adc.w	r1, r9, r6
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	461d      	mov	r5, r3
 8002c90:	f04f 0600 	mov.w	r6, #0
 8002c94:	196b      	adds	r3, r5, r5
 8002c96:	eb46 0406 	adc.w	r4, r6, r6
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4623      	mov	r3, r4
 8002c9e:	f7fd fa9b 	bl	80001d8 <__aeabi_uldivmod>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4ba5      	ldr	r3, [pc, #660]	; (8002f40 <UART_SetConfig+0x384>)
 8002caa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	f04f 0600 	mov.w	r6, #0
 8002cbc:	46a9      	mov	r9, r5
 8002cbe:	46b2      	mov	sl, r6
 8002cc0:	eb19 0309 	adds.w	r3, r9, r9
 8002cc4:	eb4a 040a 	adc.w	r4, sl, sl
 8002cc8:	4699      	mov	r9, r3
 8002cca:	46a2      	mov	sl, r4
 8002ccc:	eb19 0905 	adds.w	r9, r9, r5
 8002cd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ce4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ce8:	4689      	mov	r9, r1
 8002cea:	4692      	mov	sl, r2
 8002cec:	eb19 0005 	adds.w	r0, r9, r5
 8002cf0:	eb4a 0106 	adc.w	r1, sl, r6
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	461d      	mov	r5, r3
 8002cfa:	f04f 0600 	mov.w	r6, #0
 8002cfe:	196b      	adds	r3, r5, r5
 8002d00:	eb46 0406 	adc.w	r4, r6, r6
 8002d04:	461a      	mov	r2, r3
 8002d06:	4623      	mov	r3, r4
 8002d08:	f7fd fa66 	bl	80001d8 <__aeabi_uldivmod>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	460c      	mov	r4, r1
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b8b      	ldr	r3, [pc, #556]	; (8002f40 <UART_SetConfig+0x384>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a86      	ldr	r2, [pc, #536]	; (8002f40 <UART_SetConfig+0x384>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d34:	4498      	add	r8, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	461d      	mov	r5, r3
 8002d3a:	f04f 0600 	mov.w	r6, #0
 8002d3e:	46a9      	mov	r9, r5
 8002d40:	46b2      	mov	sl, r6
 8002d42:	eb19 0309 	adds.w	r3, r9, r9
 8002d46:	eb4a 040a 	adc.w	r4, sl, sl
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	46a2      	mov	sl, r4
 8002d4e:	eb19 0905 	adds.w	r9, r9, r5
 8002d52:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d6a:	4689      	mov	r9, r1
 8002d6c:	4692      	mov	sl, r2
 8002d6e:	eb19 0005 	adds.w	r0, r9, r5
 8002d72:	eb4a 0106 	adc.w	r1, sl, r6
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	f04f 0600 	mov.w	r6, #0
 8002d80:	196b      	adds	r3, r5, r5
 8002d82:	eb46 0406 	adc.w	r4, r6, r6
 8002d86:	461a      	mov	r2, r3
 8002d88:	4623      	mov	r3, r4
 8002d8a:	f7fd fa25 	bl	80001d8 <__aeabi_uldivmod>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <UART_SetConfig+0x384>)
 8002d96:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2164      	movs	r1, #100	; 0x64
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	3332      	adds	r3, #50	; 0x32
 8002da8:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <UART_SetConfig+0x384>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	f003 0207 	and.w	r2, r3, #7
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4442      	add	r2, r8
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e26f      	b.n	800329e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f7fe ffdb 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002dc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	f04f 0600 	mov.w	r6, #0
 8002dcc:	46a8      	mov	r8, r5
 8002dce:	46b1      	mov	r9, r6
 8002dd0:	eb18 0308 	adds.w	r3, r8, r8
 8002dd4:	eb49 0409 	adc.w	r4, r9, r9
 8002dd8:	4698      	mov	r8, r3
 8002dda:	46a1      	mov	r9, r4
 8002ddc:	eb18 0805 	adds.w	r8, r8, r5
 8002de0:	eb49 0906 	adc.w	r9, r9, r6
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002df0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002df4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002df8:	4688      	mov	r8, r1
 8002dfa:	4691      	mov	r9, r2
 8002dfc:	eb18 0005 	adds.w	r0, r8, r5
 8002e00:	eb49 0106 	adc.w	r1, r9, r6
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	461d      	mov	r5, r3
 8002e0a:	f04f 0600 	mov.w	r6, #0
 8002e0e:	196b      	adds	r3, r5, r5
 8002e10:	eb46 0406 	adc.w	r4, r6, r6
 8002e14:	461a      	mov	r2, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	f7fd f9de 	bl	80001d8 <__aeabi_uldivmod>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <UART_SetConfig+0x384>)
 8002e24:	fba3 2302 	umull	r2, r3, r3, r2
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	461d      	mov	r5, r3
 8002e32:	f04f 0600 	mov.w	r6, #0
 8002e36:	46a9      	mov	r9, r5
 8002e38:	46b2      	mov	sl, r6
 8002e3a:	eb19 0309 	adds.w	r3, r9, r9
 8002e3e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e42:	4699      	mov	r9, r3
 8002e44:	46a2      	mov	sl, r4
 8002e46:	eb19 0905 	adds.w	r9, r9, r5
 8002e4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e62:	4689      	mov	r9, r1
 8002e64:	4692      	mov	sl, r2
 8002e66:	eb19 0005 	adds.w	r0, r9, r5
 8002e6a:	eb4a 0106 	adc.w	r1, sl, r6
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	461d      	mov	r5, r3
 8002e74:	f04f 0600 	mov.w	r6, #0
 8002e78:	196b      	adds	r3, r5, r5
 8002e7a:	eb46 0406 	adc.w	r4, r6, r6
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4623      	mov	r3, r4
 8002e82:	f7fd f9a9 	bl	80001d8 <__aeabi_uldivmod>
 8002e86:	4603      	mov	r3, r0
 8002e88:	460c      	mov	r4, r1
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <UART_SetConfig+0x384>)
 8002e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2164      	movs	r1, #100	; 0x64
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	3332      	adds	r3, #50	; 0x32
 8002ea0:	4a27      	ldr	r2, [pc, #156]	; (8002f40 <UART_SetConfig+0x384>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eae:	4498      	add	r8, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	461d      	mov	r5, r3
 8002eb4:	f04f 0600 	mov.w	r6, #0
 8002eb8:	46a9      	mov	r9, r5
 8002eba:	46b2      	mov	sl, r6
 8002ebc:	eb19 0309 	adds.w	r3, r9, r9
 8002ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	46a2      	mov	sl, r4
 8002ec8:	eb19 0905 	adds.w	r9, r9, r5
 8002ecc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ee4:	4689      	mov	r9, r1
 8002ee6:	4692      	mov	sl, r2
 8002ee8:	eb19 0005 	adds.w	r0, r9, r5
 8002eec:	eb4a 0106 	adc.w	r1, sl, r6
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	f04f 0600 	mov.w	r6, #0
 8002efa:	196b      	adds	r3, r5, r5
 8002efc:	eb46 0406 	adc.w	r4, r6, r6
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	f7fd f968 	bl	80001d8 <__aeabi_uldivmod>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <UART_SetConfig+0x384>)
 8002f10:	fba3 1302 	umull	r1, r3, r3, r2
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	2164      	movs	r1, #100	; 0x64
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	3332      	adds	r3, #50	; 0x32
 8002f22:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <UART_SetConfig+0x384>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	f003 0207 	and.w	r2, r3, #7
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4442      	add	r2, r8
 8002f34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f36:	e1b2      	b.n	800329e <UART_SetConfig+0x6e2>
 8002f38:	40011000 	.word	0x40011000
 8002f3c:	40011400 	.word	0x40011400
 8002f40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4ad7      	ldr	r2, [pc, #860]	; (80032a8 <UART_SetConfig+0x6ec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d005      	beq.n	8002f5a <UART_SetConfig+0x39e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4ad6      	ldr	r2, [pc, #856]	; (80032ac <UART_SetConfig+0x6f0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	f040 80d1 	bne.w	80030fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f5a:	f7fe ff21 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002f5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	469a      	mov	sl, r3
 8002f64:	f04f 0b00 	mov.w	fp, #0
 8002f68:	46d0      	mov	r8, sl
 8002f6a:	46d9      	mov	r9, fp
 8002f6c:	eb18 0308 	adds.w	r3, r8, r8
 8002f70:	eb49 0409 	adc.w	r4, r9, r9
 8002f74:	4698      	mov	r8, r3
 8002f76:	46a1      	mov	r9, r4
 8002f78:	eb18 080a 	adds.w	r8, r8, sl
 8002f7c:	eb49 090b 	adc.w	r9, r9, fp
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f94:	4688      	mov	r8, r1
 8002f96:	4691      	mov	r9, r2
 8002f98:	eb1a 0508 	adds.w	r5, sl, r8
 8002f9c:	eb4b 0609 	adc.w	r6, fp, r9
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	f04f 0400 	mov.w	r4, #0
 8002fb2:	0094      	lsls	r4, r2, #2
 8002fb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fb8:	008b      	lsls	r3, r1, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	f7fd f909 	bl	80001d8 <__aeabi_uldivmod>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4bb8      	ldr	r3, [pc, #736]	; (80032b0 <UART_SetConfig+0x6f4>)
 8002fce:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	469b      	mov	fp, r3
 8002fdc:	f04f 0c00 	mov.w	ip, #0
 8002fe0:	46d9      	mov	r9, fp
 8002fe2:	46e2      	mov	sl, ip
 8002fe4:	eb19 0309 	adds.w	r3, r9, r9
 8002fe8:	eb4a 040a 	adc.w	r4, sl, sl
 8002fec:	4699      	mov	r9, r3
 8002fee:	46a2      	mov	sl, r4
 8002ff0:	eb19 090b 	adds.w	r9, r9, fp
 8002ff4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003004:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003008:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800300c:	4689      	mov	r9, r1
 800300e:	4692      	mov	sl, r2
 8003010:	eb1b 0509 	adds.w	r5, fp, r9
 8003014:	eb4c 060a 	adc.w	r6, ip, sl
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4619      	mov	r1, r3
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	f04f 0400 	mov.w	r4, #0
 800302a:	0094      	lsls	r4, r2, #2
 800302c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003030:	008b      	lsls	r3, r1, #2
 8003032:	461a      	mov	r2, r3
 8003034:	4623      	mov	r3, r4
 8003036:	4628      	mov	r0, r5
 8003038:	4631      	mov	r1, r6
 800303a:	f7fd f8cd 	bl	80001d8 <__aeabi_uldivmod>
 800303e:	4603      	mov	r3, r0
 8003040:	460c      	mov	r4, r1
 8003042:	461a      	mov	r2, r3
 8003044:	4b9a      	ldr	r3, [pc, #616]	; (80032b0 <UART_SetConfig+0x6f4>)
 8003046:	fba3 1302 	umull	r1, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2164      	movs	r1, #100	; 0x64
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	3332      	adds	r3, #50	; 0x32
 8003058:	4a95      	ldr	r2, [pc, #596]	; (80032b0 <UART_SetConfig+0x6f4>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003064:	4498      	add	r8, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	469b      	mov	fp, r3
 800306a:	f04f 0c00 	mov.w	ip, #0
 800306e:	46d9      	mov	r9, fp
 8003070:	46e2      	mov	sl, ip
 8003072:	eb19 0309 	adds.w	r3, r9, r9
 8003076:	eb4a 040a 	adc.w	r4, sl, sl
 800307a:	4699      	mov	r9, r3
 800307c:	46a2      	mov	sl, r4
 800307e:	eb19 090b 	adds.w	r9, r9, fp
 8003082:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003086:	f04f 0100 	mov.w	r1, #0
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003092:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003096:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800309a:	4689      	mov	r9, r1
 800309c:	4692      	mov	sl, r2
 800309e:	eb1b 0509 	adds.w	r5, fp, r9
 80030a2:	eb4c 060a 	adc.w	r6, ip, sl
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4619      	mov	r1, r3
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	f04f 0400 	mov.w	r4, #0
 80030b8:	0094      	lsls	r4, r2, #2
 80030ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030be:	008b      	lsls	r3, r1, #2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	4628      	mov	r0, r5
 80030c6:	4631      	mov	r1, r6
 80030c8:	f7fd f886 	bl	80001d8 <__aeabi_uldivmod>
 80030cc:	4603      	mov	r3, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b77      	ldr	r3, [pc, #476]	; (80032b0 <UART_SetConfig+0x6f4>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	2164      	movs	r1, #100	; 0x64
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	3332      	adds	r3, #50	; 0x32
 80030e6:	4a72      	ldr	r2, [pc, #456]	; (80032b0 <UART_SetConfig+0x6f4>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	f003 020f 	and.w	r2, r3, #15
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4442      	add	r2, r8
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	e0d0      	b.n	800329e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80030fc:	f7fe fe3c 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8003100:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	469a      	mov	sl, r3
 8003106:	f04f 0b00 	mov.w	fp, #0
 800310a:	46d0      	mov	r8, sl
 800310c:	46d9      	mov	r9, fp
 800310e:	eb18 0308 	adds.w	r3, r8, r8
 8003112:	eb49 0409 	adc.w	r4, r9, r9
 8003116:	4698      	mov	r8, r3
 8003118:	46a1      	mov	r9, r4
 800311a:	eb18 080a 	adds.w	r8, r8, sl
 800311e:	eb49 090b 	adc.w	r9, r9, fp
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800312e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003132:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003136:	4688      	mov	r8, r1
 8003138:	4691      	mov	r9, r2
 800313a:	eb1a 0508 	adds.w	r5, sl, r8
 800313e:	eb4b 0609 	adc.w	r6, fp, r9
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4619      	mov	r1, r3
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f04f 0400 	mov.w	r4, #0
 8003154:	0094      	lsls	r4, r2, #2
 8003156:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800315a:	008b      	lsls	r3, r1, #2
 800315c:	461a      	mov	r2, r3
 800315e:	4623      	mov	r3, r4
 8003160:	4628      	mov	r0, r5
 8003162:	4631      	mov	r1, r6
 8003164:	f7fd f838 	bl	80001d8 <__aeabi_uldivmod>
 8003168:	4603      	mov	r3, r0
 800316a:	460c      	mov	r4, r1
 800316c:	461a      	mov	r2, r3
 800316e:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <UART_SetConfig+0x6f4>)
 8003170:	fba3 2302 	umull	r2, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	469b      	mov	fp, r3
 800317e:	f04f 0c00 	mov.w	ip, #0
 8003182:	46d9      	mov	r9, fp
 8003184:	46e2      	mov	sl, ip
 8003186:	eb19 0309 	adds.w	r3, r9, r9
 800318a:	eb4a 040a 	adc.w	r4, sl, sl
 800318e:	4699      	mov	r9, r3
 8003190:	46a2      	mov	sl, r4
 8003192:	eb19 090b 	adds.w	r9, r9, fp
 8003196:	eb4a 0a0c 	adc.w	sl, sl, ip
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ae:	4689      	mov	r9, r1
 80031b0:	4692      	mov	sl, r2
 80031b2:	eb1b 0509 	adds.w	r5, fp, r9
 80031b6:	eb4c 060a 	adc.w	r6, ip, sl
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4619      	mov	r1, r3
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	f04f 0400 	mov.w	r4, #0
 80031cc:	0094      	lsls	r4, r2, #2
 80031ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031d2:	008b      	lsls	r3, r1, #2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	4628      	mov	r0, r5
 80031da:	4631      	mov	r1, r6
 80031dc:	f7fc fffc 	bl	80001d8 <__aeabi_uldivmod>
 80031e0:	4603      	mov	r3, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <UART_SetConfig+0x6f4>)
 80031e8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	2164      	movs	r1, #100	; 0x64
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	3332      	adds	r3, #50	; 0x32
 80031fa:	4a2d      	ldr	r2, [pc, #180]	; (80032b0 <UART_SetConfig+0x6f4>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003206:	4498      	add	r8, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	469b      	mov	fp, r3
 800320c:	f04f 0c00 	mov.w	ip, #0
 8003210:	46d9      	mov	r9, fp
 8003212:	46e2      	mov	sl, ip
 8003214:	eb19 0309 	adds.w	r3, r9, r9
 8003218:	eb4a 040a 	adc.w	r4, sl, sl
 800321c:	4699      	mov	r9, r3
 800321e:	46a2      	mov	sl, r4
 8003220:	eb19 090b 	adds.w	r9, r9, fp
 8003224:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003234:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003238:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800323c:	4689      	mov	r9, r1
 800323e:	4692      	mov	sl, r2
 8003240:	eb1b 0509 	adds.w	r5, fp, r9
 8003244:	eb4c 060a 	adc.w	r6, ip, sl
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	f04f 0400 	mov.w	r4, #0
 800325a:	0094      	lsls	r4, r2, #2
 800325c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003260:	008b      	lsls	r3, r1, #2
 8003262:	461a      	mov	r2, r3
 8003264:	4623      	mov	r3, r4
 8003266:	4628      	mov	r0, r5
 8003268:	4631      	mov	r1, r6
 800326a:	f7fc ffb5 	bl	80001d8 <__aeabi_uldivmod>
 800326e:	4603      	mov	r3, r0
 8003270:	460c      	mov	r4, r1
 8003272:	461a      	mov	r2, r3
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <UART_SetConfig+0x6f4>)
 8003276:	fba3 1302 	umull	r1, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2164      	movs	r1, #100	; 0x64
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	3332      	adds	r3, #50	; 0x32
 8003288:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <UART_SetConfig+0x6f4>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4442      	add	r2, r8
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	e7ff      	b.n	800329e <UART_SetConfig+0x6e2>
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a8:	40011000 	.word	0x40011000
 80032ac:	40011400 	.word	0x40011400
 80032b0:	51eb851f 	.word	0x51eb851f

080032b4 <__libc_init_array>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	4e0d      	ldr	r6, [pc, #52]	; (80032ec <__libc_init_array+0x38>)
 80032b8:	4c0d      	ldr	r4, [pc, #52]	; (80032f0 <__libc_init_array+0x3c>)
 80032ba:	1ba4      	subs	r4, r4, r6
 80032bc:	10a4      	asrs	r4, r4, #2
 80032be:	2500      	movs	r5, #0
 80032c0:	42a5      	cmp	r5, r4
 80032c2:	d109      	bne.n	80032d8 <__libc_init_array+0x24>
 80032c4:	4e0b      	ldr	r6, [pc, #44]	; (80032f4 <__libc_init_array+0x40>)
 80032c6:	4c0c      	ldr	r4, [pc, #48]	; (80032f8 <__libc_init_array+0x44>)
 80032c8:	f000 f8d4 	bl	8003474 <_init>
 80032cc:	1ba4      	subs	r4, r4, r6
 80032ce:	10a4      	asrs	r4, r4, #2
 80032d0:	2500      	movs	r5, #0
 80032d2:	42a5      	cmp	r5, r4
 80032d4:	d105      	bne.n	80032e2 <__libc_init_array+0x2e>
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032dc:	4798      	blx	r3
 80032de:	3501      	adds	r5, #1
 80032e0:	e7ee      	b.n	80032c0 <__libc_init_array+0xc>
 80032e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032e6:	4798      	blx	r3
 80032e8:	3501      	adds	r5, #1
 80032ea:	e7f2      	b.n	80032d2 <__libc_init_array+0x1e>
 80032ec:	080035b8 	.word	0x080035b8
 80032f0:	080035b8 	.word	0x080035b8
 80032f4:	080035b8 	.word	0x080035b8
 80032f8:	080035bc 	.word	0x080035bc

080032fc <memset>:
 80032fc:	4402      	add	r2, r0
 80032fe:	4603      	mov	r3, r0
 8003300:	4293      	cmp	r3, r2
 8003302:	d100      	bne.n	8003306 <memset+0xa>
 8003304:	4770      	bx	lr
 8003306:	f803 1b01 	strb.w	r1, [r3], #1
 800330a:	e7f9      	b.n	8003300 <memset+0x4>

0800330c <_strtol_l.isra.0>:
 800330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003310:	4680      	mov	r8, r0
 8003312:	4689      	mov	r9, r1
 8003314:	4692      	mov	sl, r2
 8003316:	461e      	mov	r6, r3
 8003318:	460f      	mov	r7, r1
 800331a:	463d      	mov	r5, r7
 800331c:	9808      	ldr	r0, [sp, #32]
 800331e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003322:	f000 f885 	bl	8003430 <__locale_ctype_ptr_l>
 8003326:	4420      	add	r0, r4
 8003328:	7843      	ldrb	r3, [r0, #1]
 800332a:	f013 0308 	ands.w	r3, r3, #8
 800332e:	d132      	bne.n	8003396 <_strtol_l.isra.0+0x8a>
 8003330:	2c2d      	cmp	r4, #45	; 0x2d
 8003332:	d132      	bne.n	800339a <_strtol_l.isra.0+0x8e>
 8003334:	787c      	ldrb	r4, [r7, #1]
 8003336:	1cbd      	adds	r5, r7, #2
 8003338:	2201      	movs	r2, #1
 800333a:	2e00      	cmp	r6, #0
 800333c:	d05d      	beq.n	80033fa <_strtol_l.isra.0+0xee>
 800333e:	2e10      	cmp	r6, #16
 8003340:	d109      	bne.n	8003356 <_strtol_l.isra.0+0x4a>
 8003342:	2c30      	cmp	r4, #48	; 0x30
 8003344:	d107      	bne.n	8003356 <_strtol_l.isra.0+0x4a>
 8003346:	782b      	ldrb	r3, [r5, #0]
 8003348:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800334c:	2b58      	cmp	r3, #88	; 0x58
 800334e:	d14f      	bne.n	80033f0 <_strtol_l.isra.0+0xe4>
 8003350:	786c      	ldrb	r4, [r5, #1]
 8003352:	2610      	movs	r6, #16
 8003354:	3502      	adds	r5, #2
 8003356:	2a00      	cmp	r2, #0
 8003358:	bf14      	ite	ne
 800335a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800335e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003362:	2700      	movs	r7, #0
 8003364:	fbb1 fcf6 	udiv	ip, r1, r6
 8003368:	4638      	mov	r0, r7
 800336a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800336e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003372:	2b09      	cmp	r3, #9
 8003374:	d817      	bhi.n	80033a6 <_strtol_l.isra.0+0x9a>
 8003376:	461c      	mov	r4, r3
 8003378:	42a6      	cmp	r6, r4
 800337a:	dd23      	ble.n	80033c4 <_strtol_l.isra.0+0xb8>
 800337c:	1c7b      	adds	r3, r7, #1
 800337e:	d007      	beq.n	8003390 <_strtol_l.isra.0+0x84>
 8003380:	4584      	cmp	ip, r0
 8003382:	d31c      	bcc.n	80033be <_strtol_l.isra.0+0xb2>
 8003384:	d101      	bne.n	800338a <_strtol_l.isra.0+0x7e>
 8003386:	45a6      	cmp	lr, r4
 8003388:	db19      	blt.n	80033be <_strtol_l.isra.0+0xb2>
 800338a:	fb00 4006 	mla	r0, r0, r6, r4
 800338e:	2701      	movs	r7, #1
 8003390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003394:	e7eb      	b.n	800336e <_strtol_l.isra.0+0x62>
 8003396:	462f      	mov	r7, r5
 8003398:	e7bf      	b.n	800331a <_strtol_l.isra.0+0xe>
 800339a:	2c2b      	cmp	r4, #43	; 0x2b
 800339c:	bf04      	itt	eq
 800339e:	1cbd      	addeq	r5, r7, #2
 80033a0:	787c      	ldrbeq	r4, [r7, #1]
 80033a2:	461a      	mov	r2, r3
 80033a4:	e7c9      	b.n	800333a <_strtol_l.isra.0+0x2e>
 80033a6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80033aa:	2b19      	cmp	r3, #25
 80033ac:	d801      	bhi.n	80033b2 <_strtol_l.isra.0+0xa6>
 80033ae:	3c37      	subs	r4, #55	; 0x37
 80033b0:	e7e2      	b.n	8003378 <_strtol_l.isra.0+0x6c>
 80033b2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80033b6:	2b19      	cmp	r3, #25
 80033b8:	d804      	bhi.n	80033c4 <_strtol_l.isra.0+0xb8>
 80033ba:	3c57      	subs	r4, #87	; 0x57
 80033bc:	e7dc      	b.n	8003378 <_strtol_l.isra.0+0x6c>
 80033be:	f04f 37ff 	mov.w	r7, #4294967295
 80033c2:	e7e5      	b.n	8003390 <_strtol_l.isra.0+0x84>
 80033c4:	1c7b      	adds	r3, r7, #1
 80033c6:	d108      	bne.n	80033da <_strtol_l.isra.0+0xce>
 80033c8:	2322      	movs	r3, #34	; 0x22
 80033ca:	f8c8 3000 	str.w	r3, [r8]
 80033ce:	4608      	mov	r0, r1
 80033d0:	f1ba 0f00 	cmp.w	sl, #0
 80033d4:	d107      	bne.n	80033e6 <_strtol_l.isra.0+0xda>
 80033d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033da:	b102      	cbz	r2, 80033de <_strtol_l.isra.0+0xd2>
 80033dc:	4240      	negs	r0, r0
 80033de:	f1ba 0f00 	cmp.w	sl, #0
 80033e2:	d0f8      	beq.n	80033d6 <_strtol_l.isra.0+0xca>
 80033e4:	b10f      	cbz	r7, 80033ea <_strtol_l.isra.0+0xde>
 80033e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80033ea:	f8ca 9000 	str.w	r9, [sl]
 80033ee:	e7f2      	b.n	80033d6 <_strtol_l.isra.0+0xca>
 80033f0:	2430      	movs	r4, #48	; 0x30
 80033f2:	2e00      	cmp	r6, #0
 80033f4:	d1af      	bne.n	8003356 <_strtol_l.isra.0+0x4a>
 80033f6:	2608      	movs	r6, #8
 80033f8:	e7ad      	b.n	8003356 <_strtol_l.isra.0+0x4a>
 80033fa:	2c30      	cmp	r4, #48	; 0x30
 80033fc:	d0a3      	beq.n	8003346 <_strtol_l.isra.0+0x3a>
 80033fe:	260a      	movs	r6, #10
 8003400:	e7a9      	b.n	8003356 <_strtol_l.isra.0+0x4a>
	...

08003404 <strtol>:
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <strtol+0x24>)
 8003406:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003408:	681c      	ldr	r4, [r3, #0]
 800340a:	4d08      	ldr	r5, [pc, #32]	; (800342c <strtol+0x28>)
 800340c:	6a23      	ldr	r3, [r4, #32]
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf08      	it	eq
 8003412:	462b      	moveq	r3, r5
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	460a      	mov	r2, r1
 800341a:	4601      	mov	r1, r0
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff ff75 	bl	800330c <_strtol_l.isra.0>
 8003422:	b003      	add	sp, #12
 8003424:	bd30      	pop	{r4, r5, pc}
 8003426:	bf00      	nop
 8003428:	2000000c 	.word	0x2000000c
 800342c:	20000070 	.word	0x20000070

08003430 <__locale_ctype_ptr_l>:
 8003430:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003434:	4770      	bx	lr

08003436 <__ascii_mbtowc>:
 8003436:	b082      	sub	sp, #8
 8003438:	b901      	cbnz	r1, 800343c <__ascii_mbtowc+0x6>
 800343a:	a901      	add	r1, sp, #4
 800343c:	b142      	cbz	r2, 8003450 <__ascii_mbtowc+0x1a>
 800343e:	b14b      	cbz	r3, 8003454 <__ascii_mbtowc+0x1e>
 8003440:	7813      	ldrb	r3, [r2, #0]
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	1c10      	adds	r0, r2, #0
 8003448:	bf18      	it	ne
 800344a:	2001      	movne	r0, #1
 800344c:	b002      	add	sp, #8
 800344e:	4770      	bx	lr
 8003450:	4610      	mov	r0, r2
 8003452:	e7fb      	b.n	800344c <__ascii_mbtowc+0x16>
 8003454:	f06f 0001 	mvn.w	r0, #1
 8003458:	e7f8      	b.n	800344c <__ascii_mbtowc+0x16>

0800345a <__ascii_wctomb>:
 800345a:	b149      	cbz	r1, 8003470 <__ascii_wctomb+0x16>
 800345c:	2aff      	cmp	r2, #255	; 0xff
 800345e:	bf85      	ittet	hi
 8003460:	238a      	movhi	r3, #138	; 0x8a
 8003462:	6003      	strhi	r3, [r0, #0]
 8003464:	700a      	strbls	r2, [r1, #0]
 8003466:	f04f 30ff 	movhi.w	r0, #4294967295
 800346a:	bf98      	it	ls
 800346c:	2001      	movls	r0, #1
 800346e:	4770      	bx	lr
 8003470:	4608      	mov	r0, r1
 8003472:	4770      	bx	lr

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
